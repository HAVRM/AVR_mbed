
SDcm02_sample.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a0  00800100  00001a56  00001aea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000226  008001a0  008001a0  00001b8a  2**0
                  ALLOC
  3 .stab         000008ac  00000000  00000000  00001b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001b6  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000128  00000000  00000000  000025f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f20  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000834  00000000  00000000  00004638  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa9  00000000  00000000  00004e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000758  00000000  00000000  00005918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000662  00000000  00000000  00006070  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000026a7  00000000  00000000  000066d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00008d79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e5       	ldi	r30, 0x56	; 86
      7c:	fa e1       	ldi	r31, 0x1A	; 26
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 3a       	cpi	r26, 0xA0	; 160
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	13 e0       	ldi	r17, 0x03	; 3
      8c:	a0 ea       	ldi	r26, 0xA0	; 160
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3c       	cpi	r26, 0xC6	; 198
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 36 0c 	call	0x186c	; 0x186c <main>
      9e:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
#include "delay.h"

void USART_Init(unsigned int baud)
{
	baud=12;
	UBRR0H = (unsigned char)(baud>>8); /* ﾎﾞｰﾚｰﾄ設定(上位ﾊﾞｲﾄ) */
      a6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)baud; /* ﾎﾞｰﾚｰﾄ設定(下位ﾊﾞｲﾄ) */
      aa:	8c e0       	ldi	r24, 0x0C	; 12
      ac:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A = 1<<U2X0;
      b0:	82 e0       	ldi	r24, 0x02	; 2
      b2:	80 93 c0 00 	sts	0x00C0, r24
	UCSR0C = 3<<UCSZ00; /* ﾌﾚｰﾑ形式設定(8ﾋﾞｯﾄ,1停止ﾋﾞｯﾄ) */
      b6:	86 e0       	ldi	r24, 0x06	; 6
      b8:	80 93 c2 00 	sts	0x00C2, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); /* 送受信許可 */
      bc:	88 e1       	ldi	r24, 0x18	; 24
      be:	80 93 c1 00 	sts	0x00C1, r24
}
      c2:	08 95       	ret

000000c4 <USART_getc>:

unsigned char USART_getc(void)
{
	while ( !(UCSR0A & (1<<RXC0)) ); /* 受信完了待機 */
      c4:	80 91 c0 00 	lds	r24, 0x00C0
      c8:	87 ff       	sbrs	r24, 7
      ca:	fc cf       	rjmp	.-8      	; 0xc4 <USART_getc>
	return UDR0; /* 受信ﾃﾞｰﾀ取得 */
      cc:	80 91 c6 00 	lds	r24, 0x00C6
}
      d0:	08 95       	ret

000000d2 <sd_L3_fatentryio>:
#define SD_L3_ROOTDIRCL		0xfffd		// Pseudo: Directory region access

//
// read and update FAT entry
//
unsigned short sd_L3_fatentryio(struct sd_L3_vol *vp, unsigned short cl, unsigned short updcl) {	// read data(SD_L3_BADCL==error)
      d2:	6f 92       	push	r6
      d4:	7f 92       	push	r7
      d6:	8f 92       	push	r8
      d8:	9f 92       	push	r9
      da:	af 92       	push	r10
      dc:	bf 92       	push	r11
      de:	cf 92       	push	r12
      e0:	df 92       	push	r13
      e2:	ef 92       	push	r14
      e4:	ff 92       	push	r15
      e6:	0f 93       	push	r16
      e8:	1f 93       	push	r17
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
      ee:	3c 01       	movw	r6, r24
      f0:	6b 01       	movw	r12, r22
      f2:	ea 01       	movw	r28, r20
		int		r;						// relative sector location
		int		i;						// buffer index
		long	s;						// absolute sector location
		char	*p;						// buffer pointer

		if (cl >= SD_L3_SPECIALCL) {
      f4:	8f ef       	ldi	r24, 0xFF	; 255
      f6:	60 3f       	cpi	r22, 0xF0	; 240
      f8:	78 07       	cpc	r23, r24
      fa:	08 f0       	brcs	.+2      	; 0xfe <sd_L3_fatentryio+0x2c>
      fc:	94 c0       	rjmp	.+296    	; 0x226 <sd_L3_fatentryio+0x154>
			d = cl;
			break;
		}

		if (vp->FATType == SD_L3_FAT12) {
      fe:	f3 01       	movw	r30, r6
     100:	82 89       	ldd	r24, Z+18	; 0x12
     102:	8c 30       	cpi	r24, 0x0C	; 12
     104:	d1 f4       	brne	.+52     	; 0x13a <sd_L3_fatentryio+0x68>
			int	w;

			w = cl + (cl >> 1);			// *1.5
     106:	cb 01       	movw	r24, r22
     108:	96 95       	lsr	r25
     10a:	87 95       	ror	r24
     10c:	8c 0d       	add	r24, r12
     10e:	9d 1d       	adc	r25, r13
//			r = w / SD_L3_BytePerSec;
//			i = w % SD_L3_BytePerSec;
			r = w >> SD_L3_BytePerSecPow;		// self optimize
     110:	9c 01       	movw	r18, r24
     112:	23 2f       	mov	r18, r19
     114:	33 0f       	add	r19, r19
     116:	33 0b       	sbc	r19, r19
     118:	25 95       	asr	r18
			i = w & SD_L3_BytePerSecMask;		// self optimize
     11a:	ff ef       	ldi	r31, 0xFF	; 255
     11c:	ef 2e       	mov	r14, r31
     11e:	f1 e0       	ldi	r31, 0x01	; 1
     120:	ff 2e       	mov	r15, r31
     122:	e8 22       	and	r14, r24
     124:	f9 22       	and	r15, r25
			if (i == (SD_L3_BytePerSec - 1)) {	// sector boundery
     126:	ff ef       	ldi	r31, 0xFF	; 255
     128:	ef 16       	cp	r14, r31
     12a:	f1 e0       	ldi	r31, 0x01	; 1
     12c:	ff 06       	cpc	r15, r31
     12e:	71 f4       	brne	.+28     	; 0x14c <sd_L3_fatentryio+0x7a>
				i = 0;
				r++;
     130:	2f 5f       	subi	r18, 0xFF	; 255
     132:	3f 4f       	sbci	r19, 0xFF	; 255
//			r = w / SD_L3_BytePerSec;
//			i = w % SD_L3_BytePerSec;
			r = w >> SD_L3_BytePerSecPow;		// self optimize
			i = w & SD_L3_BytePerSecMask;		// self optimize
			if (i == (SD_L3_BytePerSec - 1)) {	// sector boundery
				i = 0;
     134:	ee 24       	eor	r14, r14
     136:	ff 24       	eor	r15, r15
     138:	09 c0       	rjmp	.+18     	; 0x14c <sd_L3_fatentryio+0x7a>
				r++;
			}
		} else {						// FAT16
//			r = (cl * SD_L3_FATEntSz) / SD_L3_BytePerSec;
//			i = (cl * SD_L3_FATEntSz) % SD_L3_BytePerSec;
			r = cl >> (SD_L3_BytePerSecPow - SD_L3_FATEntSzPow);		// self optimize
     13a:	27 2f       	mov	r18, r23
     13c:	33 27       	eor	r19, r19
			i = (cl << SD_L3_FATEntSzPow) & SD_L3_BytePerSecMask;		// self optimize
     13e:	7b 01       	movw	r14, r22
     140:	ee 0c       	add	r14, r14
     142:	ff 1c       	adc	r15, r15
     144:	8f ef       	ldi	r24, 0xFF	; 255
     146:	91 e0       	ldi	r25, 0x01	; 1
     148:	e8 22       	and	r14, r24
     14a:	f9 22       	and	r15, r25
		}

		s = vp->FirstFATSector + r;
     14c:	49 01       	movw	r8, r18
     14e:	aa 24       	eor	r10, r10
     150:	97 fc       	sbrc	r9, 7
     152:	a0 94       	com	r10
     154:	ba 2c       	mov	r11, r10
     156:	f3 01       	movw	r30, r6
     158:	81 81       	ldd	r24, Z+1	; 0x01
     15a:	92 81       	ldd	r25, Z+2	; 0x02
     15c:	a3 81       	ldd	r26, Z+3	; 0x03
     15e:	b4 81       	ldd	r27, Z+4	; 0x04
     160:	88 0e       	add	r8, r24
     162:	99 1e       	adc	r9, r25
     164:	aa 1e       	adc	r10, r26
     166:	bb 1e       	adc	r11, r27
		if (sd_L2_read(vp->pp, s) != 0) {
     168:	86 a1       	lds	r24, 0x46
     16a:	97 a1       	lds	r25, 0x47
     16c:	b5 01       	movw	r22, r10
     16e:	a4 01       	movw	r20, r8
     170:	0e 94 a3 0b 	call	0x1746	; 0x1746 <sd_L2_read>
     174:	88 23       	and	r24, r24
     176:	09 f0       	breq	.+2      	; 0x17a <sd_L3_fatentryio+0xa8>
     178:	53 c0       	rjmp	.+166    	; 0x220 <sd_L3_fatentryio+0x14e>
			p = &sd_buf2[i & 0xff];
		} else {
			p = &sd_buf1[i];
		}
#else
		p = &sd_buf[i];
     17a:	d7 01       	movw	r26, r14
     17c:	aa 53       	subi	r26, 0x3A	; 58
     17e:	be 4f       	sbci	r27, 0xFE	; 254
#endif
		d = sd_boconv2(p);
     180:	0d 91       	ld	r16, X+
     182:	1c 91       	ld	r17, X
     184:	11 97       	sbiw	r26, 0x01	; 1
		if (vp->FATType == SD_L3_FAT12) {
     186:	f3 01       	movw	r30, r6
     188:	82 89       	ldd	r24, Z+18	; 0x12
     18a:	8c 30       	cpi	r24, 0x0C	; 12
     18c:	71 f4       	brne	.+28     	; 0x1aa <sd_L3_fatentryio+0xd8>
			if (cl & 1) {
     18e:	c0 fe       	sbrs	r12, 0
     190:	06 c0       	rjmp	.+12     	; 0x19e <sd_L3_fatentryio+0xcc>
				d >>= 4;
     192:	44 e0       	ldi	r20, 0x04	; 4
     194:	16 95       	lsr	r17
     196:	07 95       	ror	r16
     198:	4a 95       	dec	r20
     19a:	e1 f7       	brne	.-8      	; 0x194 <sd_L3_fatentryio+0xc2>
     19c:	01 c0       	rjmp	.+2      	; 0x1a0 <sd_L3_fatentryio+0xce>
			} else {
				d &= 0x0fff;
     19e:	1f 70       	andi	r17, 0x0F	; 15
			}
			if (d >= (SD_L3_BADCL & 0x0fff)) {
     1a0:	ff e0       	ldi	r31, 0x0F	; 15
     1a2:	07 3f       	cpi	r16, 0xF7	; 247
     1a4:	1f 07       	cpc	r17, r31
     1a6:	08 f0       	brcs	.+2      	; 0x1aa <sd_L3_fatentryio+0xd8>
				d |= 0xf000;
     1a8:	10 6f       	ori	r17, 0xF0	; 240
			}
		}

		// Update write
#ifdef SD_OPT_WRITE
		if (updcl != SD_L3_READONLYCL) {
     1aa:	9f ef       	ldi	r25, 0xFF	; 255
     1ac:	ce 3f       	cpi	r28, 0xFE	; 254
     1ae:	d9 07       	cpc	r29, r25
     1b0:	d9 f1       	breq	.+118    	; 0x228 <sd_L3_fatentryio+0x156>
			char n;

			if (vp->FATType == SD_L3_FAT12) {
     1b2:	8c 30       	cpi	r24, 0x0C	; 12
     1b4:	c9 f4       	brne	.+50     	; 0x1e8 <sd_L3_fatentryio+0x116>
				if (cl & 1) {
					updcl = (updcl << 4) | (*p & 0x0f);
     1b6:	ce 01       	movw	r24, r28
#ifdef SD_OPT_WRITE
		if (updcl != SD_L3_READONLYCL) {
			char n;

			if (vp->FATType == SD_L3_FAT12) {
				if (cl & 1) {
     1b8:	c0 fe       	sbrs	r12, 0
     1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <sd_L3_fatentryio+0xfe>
					updcl = (updcl << 4) | (*p & 0x0f);
     1bc:	34 e0       	ldi	r19, 0x04	; 4
     1be:	88 0f       	add	r24, r24
     1c0:	99 1f       	adc	r25, r25
     1c2:	3a 95       	dec	r19
     1c4:	e1 f7       	brne	.-8      	; 0x1be <sd_L3_fatentryio+0xec>
     1c6:	cc 91       	ld	r28, X
     1c8:	d0 e0       	ldi	r29, 0x00	; 0
     1ca:	cf 70       	andi	r28, 0x0F	; 15
     1cc:	d0 70       	andi	r29, 0x00	; 0
     1ce:	0a c0       	rjmp	.+20     	; 0x1e4 <sd_L3_fatentryio+0x112>
				} else {
					updcl = (updcl & 0x0fff) | ((*(p + 1) & 0xf0) << 8);
     1d0:	9f 70       	andi	r25, 0x0F	; 15
     1d2:	f7 01       	movw	r30, r14
     1d4:	e9 53       	subi	r30, 0x39	; 57
     1d6:	fe 4f       	sbci	r31, 0xFE	; 254
     1d8:	c0 81       	ld	r28, Z
     1da:	d0 e0       	ldi	r29, 0x00	; 0
     1dc:	c0 7f       	andi	r28, 0xF0	; 240
     1de:	d0 70       	andi	r29, 0x00	; 0
     1e0:	dc 2f       	mov	r29, r28
     1e2:	cc 27       	eor	r28, r28
     1e4:	c8 2b       	or	r28, r24
     1e6:	d9 2b       	or	r29, r25
				}
			}
			sd_bounconv2(p, updcl);
     1e8:	11 96       	adiw	r26, 0x01	; 1
     1ea:	dc 93       	st	X, r29
     1ec:	ce 93       	st	-X, r28

			// all copy
			for(n = vp->NumFATs; n > 0; --n) {
     1ee:	f3 01       	movw	r30, r6
     1f0:	c1 89       	ldd	r28, Z+17	; 0x11
     1f2:	13 c0       	rjmp	.+38     	; 0x21a <sd_L3_fatentryio+0x148>
				if (sd_L2_write(vp->pp, s) != 0) {
     1f4:	f3 01       	movw	r30, r6
     1f6:	86 a1       	lds	r24, 0x46
     1f8:	97 a1       	lds	r25, 0x47
     1fa:	b5 01       	movw	r22, r10
     1fc:	a4 01       	movw	r20, r8
     1fe:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <sd_L2_write>
     202:	88 23       	and	r24, r24
     204:	69 f4       	brne	.+26     	; 0x220 <sd_L3_fatentryio+0x14e>
					d = SD_L3_BADCL;
					break;
				}
				s += vp->FATSz;
     206:	f3 01       	movw	r30, r6
     208:	87 85       	ldd	r24, Z+15	; 0x0f
     20a:	90 89       	ldd	r25, Z+16	; 0x10
     20c:	a0 e0       	ldi	r26, 0x00	; 0
     20e:	b0 e0       	ldi	r27, 0x00	; 0
     210:	88 0e       	add	r8, r24
     212:	99 1e       	adc	r9, r25
     214:	aa 1e       	adc	r10, r26
     216:	bb 1e       	adc	r11, r27
				}
			}
			sd_bounconv2(p, updcl);

			// all copy
			for(n = vp->NumFATs; n > 0; --n) {
     218:	c1 50       	subi	r28, 0x01	; 1
     21a:	cc 23       	and	r28, r28
     21c:	59 f7       	brne	.-42     	; 0x1f4 <sd_L3_fatentryio+0x122>
     21e:	04 c0       	rjmp	.+8      	; 0x228 <sd_L3_fatentryio+0x156>
				if (sd_L2_write(vp->pp, s) != 0) {
					d = SD_L3_BADCL;
     220:	07 ef       	ldi	r16, 0xF7	; 247
     222:	1f ef       	ldi	r17, 0xFF	; 255
     224:	01 c0       	rjmp	.+2      	; 0x228 <sd_L3_fatentryio+0x156>
		int		r;						// relative sector location
		int		i;						// buffer index
		long	s;						// absolute sector location
		char	*p;						// buffer pointer

		if (cl >= SD_L3_SPECIALCL) {
     226:	8b 01       	movw	r16, r22
		break;
	}
	
	printf("L3fatentryio()=0x%04x\n", d);
	return(d);
}
     228:	c8 01       	movw	r24, r16
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	df 90       	pop	r13
     238:	cf 90       	pop	r12
     23a:	bf 90       	pop	r11
     23c:	af 90       	pop	r10
     23e:	9f 90       	pop	r9
     240:	8f 90       	pop	r8
     242:	7f 90       	pop	r7
     244:	6f 90       	pop	r6
     246:	08 95       	ret

00000248 <sd_L3_alloccl>:

//
// allocate new FAT entry
//
#ifdef SD_OPT_WRITE
unsigned short sd_L3_alloccl(struct sd_L3_vol *vp, unsigned short firstcl) {	// new cluster number(SD_L3_BADCL==error)
     248:	af 92       	push	r10
     24a:	bf 92       	push	r11
     24c:	cf 92       	push	r12
     24e:	df 92       	push	r13
     250:	ef 92       	push	r14
     252:	ff 92       	push	r15
     254:	0f 93       	push	r16
     256:	1f 93       	push	r17
     258:	cf 93       	push	r28
     25a:	df 93       	push	r29
     25c:	7c 01       	movw	r14, r24
     25e:	8b 01       	movw	r16, r22
	for(;;) {
		char found;

		// Find free cluster (sequential search)
		found = 0;
		for(cl = 0; cl < vp->FATEntCnt; cl++) {
     260:	c0 e0       	ldi	r28, 0x00	; 0
     262:	d0 e0       	ldi	r29, 0x00	; 0
     264:	09 c0       	rjmp	.+18     	; 0x278 <sd_L3_alloccl+0x30>
			if (sd_L3_fatentryio(vp, cl, SD_L3_READONLYCL) == SD_L3_FREECL) {
     266:	c7 01       	movw	r24, r14
     268:	be 01       	movw	r22, r28
     26a:	4e ef       	ldi	r20, 0xFE	; 254
     26c:	5f ef       	ldi	r21, 0xFF	; 255
     26e:	0e 94 69 00 	call	0xd2	; 0xd2 <sd_L3_fatentryio>
     272:	00 97       	sbiw	r24, 0x00	; 0
     274:	41 f0       	breq	.+16     	; 0x286 <sd_L3_alloccl+0x3e>
	for(;;) {
		char found;

		// Find free cluster (sequential search)
		found = 0;
		for(cl = 0; cl < vp->FATEntCnt; cl++) {
     276:	21 96       	adiw	r28, 0x01	; 1
     278:	f7 01       	movw	r30, r14
     27a:	85 85       	ldd	r24, Z+13	; 0x0d
     27c:	96 85       	ldd	r25, Z+14	; 0x0e
     27e:	c8 17       	cp	r28, r24
     280:	d9 07       	cpc	r29, r25
     282:	88 f3       	brcs	.-30     	; 0x266 <sd_L3_alloccl+0x1e>
     284:	38 c0       	rjmp	.+112    	; 0x2f6 <sd_L3_alloccl+0xae>
			if (sd_L3_fatentryio(vp, cl, SD_L3_READONLYCL) == SD_L3_FREECL) {
     286:	dc 2e       	mov	r13, r28
     288:	cd 2e       	mov	r12, r29
			cl = SD_L3_BADCL;
			break;
		}

		// Allocated mark
		if (sd_L3_fatentryio(vp, cl, SD_L3_EOC) == SD_L3_BADCL) {
     28a:	c7 01       	movw	r24, r14
     28c:	be 01       	movw	r22, r28
     28e:	4f ef       	ldi	r20, 0xFF	; 255
     290:	5f ef       	ldi	r21, 0xFF	; 255
     292:	0e 94 69 00 	call	0xd2	; 0xd2 <sd_L3_fatentryio>
     296:	ff ef       	ldi	r31, 0xFF	; 255
     298:	87 3f       	cpi	r24, 0xF7	; 247
     29a:	9f 07       	cpc	r25, r31
     29c:	f1 f0       	breq	.+60     	; 0x2da <sd_L3_alloccl+0x92>
			cl = SD_L3_BADCL;
			break;
		}

		// Link chain
		if (firstcl > 1) {	// not root
     29e:	02 30       	cpi	r16, 0x02	; 2
     2a0:	11 05       	cpc	r17, r1
     2a2:	50 f4       	brcc	.+20     	; 0x2b8 <sd_L3_alloccl+0x70>
     2a4:	1c c0       	rjmp	.+56     	; 0x2de <sd_L3_alloccl+0x96>
			unsigned short lastcl;
			unsigned short c;

			for(c = firstcl; (c >= 2) && (c < SD_L3_SPECIALCL); c = sd_L3_fatentryio(vp, c, SD_L3_READONLYCL)) {
     2a6:	c7 01       	movw	r24, r14
     2a8:	b8 01       	movw	r22, r16
     2aa:	4e ef       	ldi	r20, 0xFE	; 254
     2ac:	5f ef       	ldi	r21, 0xFF	; 255
     2ae:	0e 94 69 00 	call	0xd2	; 0xd2 <sd_L3_fatentryio>
     2b2:	b0 2e       	mov	r11, r16
     2b4:	a1 2e       	mov	r10, r17
     2b6:	8c 01       	movw	r16, r24
     2b8:	c8 01       	movw	r24, r16
     2ba:	02 97       	sbiw	r24, 0x02	; 2
     2bc:	2f ef       	ldi	r18, 0xFF	; 255
     2be:	8e 3e       	cpi	r24, 0xEE	; 238
     2c0:	92 07       	cpc	r25, r18
     2c2:	88 f3       	brcs	.-30     	; 0x2a6 <sd_L3_alloccl+0x5e>
				lastcl = c;
			}

			if (sd_L3_fatentryio(vp, lastcl, cl) == SD_L3_BADCL) {
     2c4:	c7 01       	movw	r24, r14
     2c6:	6b 2d       	mov	r22, r11
     2c8:	7a 2d       	mov	r23, r10
     2ca:	4d 2d       	mov	r20, r13
     2cc:	5c 2d       	mov	r21, r12
     2ce:	0e 94 69 00 	call	0xd2	; 0xd2 <sd_L3_fatentryio>
     2d2:	ef ef       	ldi	r30, 0xFF	; 255
     2d4:	87 3f       	cpi	r24, 0xF7	; 247
     2d6:	9e 07       	cpc	r25, r30
     2d8:	11 f4       	brne	.+4      	; 0x2de <sd_L3_alloccl+0x96>
				cl = SD_L3_BADCL;
     2da:	c7 ef       	ldi	r28, 0xF7	; 247
     2dc:	df ef       	ldi	r29, 0xFF	; 255
		break;
	}

	printf("L3alloccl()=0x%04x\n", cl);
	return(cl);
}
     2de:	ce 01       	movw	r24, r28
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	08 95       	ret
				found = 1;
				break;
			}
		}
		if (!found) {
			sd_errno = SD_ENOSPC;
     2f6:	8c e1       	ldi	r24, 0x1C	; 28
     2f8:	80 93 a3 01 	sts	0x01A3, r24
     2fc:	ee cf       	rjmp	.-36     	; 0x2da <sd_L3_alloccl+0x92>

000002fe <sd_L3_freecl>:

//
// free FAT entry
//
#ifdef SD_OPT_UNLINK
signed char sd_L3_freecl(struct sd_L3_vol *vp, unsigned short firstcl) {	// 0:normal -1:error
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	df 93       	push	r29
     30a:	7c 01       	movw	r14, r24
	signed char		rc;

	printf("L3freecl(vp=0x%08lx,freecl=0x%04x) start\n", (long)vp, firstcl);
	
	// dummy loop
	for(cl = firstcl; cl < SD_L3_SPECIALCL; ) {
     30c:	eb 01       	movw	r28, r22
     30e:	16 c0       	rjmp	.+44     	; 0x33c <sd_L3_freecl+0x3e>
		unsigned short	n;

		if ((n = sd_L3_fatentryio(vp, cl, SD_L3_READONLYCL)) == SD_L3_BADCL) {
     310:	c7 01       	movw	r24, r14
     312:	be 01       	movw	r22, r28
     314:	4e ef       	ldi	r20, 0xFE	; 254
     316:	5f ef       	ldi	r21, 0xFF	; 255
     318:	0e 94 69 00 	call	0xd2	; 0xd2 <sd_L3_fatentryio>
     31c:	8c 01       	movw	r16, r24
     31e:	2f ef       	ldi	r18, 0xFF	; 255
     320:	87 3f       	cpi	r24, 0xF7	; 247
     322:	92 07       	cpc	r25, r18
     324:	99 f0       	breq	.+38     	; 0x34c <sd_L3_freecl+0x4e>
			break;
		}

		if (sd_L3_fatentryio(vp, cl, SD_L3_FREECL) == SD_L3_BADCL) {
     326:	c7 01       	movw	r24, r14
     328:	be 01       	movw	r22, r28
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	50 e0       	ldi	r21, 0x00	; 0
     32e:	0e 94 69 00 	call	0xd2	; 0xd2 <sd_L3_fatentryio>
     332:	2f ef       	ldi	r18, 0xFF	; 255
     334:	87 3f       	cpi	r24, 0xF7	; 247
     336:	92 07       	cpc	r25, r18
     338:	49 f0       	breq	.+18     	; 0x34c <sd_L3_freecl+0x4e>
			break;
		}

		cl = n;
     33a:	e8 01       	movw	r28, r16
	signed char		rc;

	printf("L3freecl(vp=0x%08lx,freecl=0x%04x) start\n", (long)vp, firstcl);
	
	// dummy loop
	for(cl = firstcl; cl < SD_L3_SPECIALCL; ) {
     33c:	8f ef       	ldi	r24, 0xFF	; 255
     33e:	c0 3f       	cpi	r28, 0xF0	; 240
     340:	d8 07       	cpc	r29, r24
     342:	30 f3       	brcs	.-52     	; 0x310 <sd_L3_freecl+0x12>
			break;
		}

		cl = n;
	}
	if (cl != SD_L3_BADCL) {
     344:	2f ef       	ldi	r18, 0xFF	; 255
     346:	c7 3f       	cpi	r28, 0xF7	; 247
     348:	d2 07       	cpc	r29, r18
     34a:	11 f0       	breq	.+4      	; 0x350 <sd_L3_freecl+0x52>
		rc = 0;
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	01 c0       	rjmp	.+2      	; 0x352 <sd_L3_freecl+0x54>
	} else {
		rc = -1;
     350:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	printf("L3freecl()=%d\n", rc);
	return(rc);
}
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	ff 90       	pop	r15
     35c:	ef 90       	pop	r14
     35e:	08 95       	ret

00000360 <sd_L3_convdirname>:
struct sd_L3_dirent	sd_L3_tempdirent;		// use reduction stack

//
// formating file name
//
void sd_L3_convdirname(char *out, char *in) {
     360:	af 92       	push	r10
     362:	bf 92       	push	r11
     364:	cf 92       	push	r12
     366:	df 92       	push	r13
     368:	ef 92       	push	r14
     36a:	ff 92       	push	r15
     36c:	0f 93       	push	r16
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	0f 92       	push	r0
     376:	cd b7       	in	r28, 0x3d	; 61
     378:	de b7       	in	r29, 0x3e	; 62
     37a:	5b 01       	movw	r10, r22
					in++;
				}
			}
			*out = toupper(*in++);

			for(j = 0; ill[j] != 0x00; j++) {
     37c:	8c 01       	movw	r16, r24
struct sd_L3_dirent	sd_L3_tempdirent;		// use reduction stack

//
// formating file name
//
void sd_L3_convdirname(char *out, char *in) {
     37e:	7c 01       	movw	r14, r24
     380:	2b e0       	ldi	r18, 0x0B	; 11
		0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B,
		0x3C, 0x3D, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C,
		0x00 };
	
	for(i = SD_L3_DIRENT_NAMESZ; i > 0; --i) {
		*out = ' ';
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	da 2e       	mov	r13, r26
			}
			*out = toupper(*in++);

			for(j = 0; ill[j] != 0x00; j++) {
				if (*out == ill[j]) {
					*out = '@';
     386:	b0 e4       	ldi	r27, 0x40	; 64
     388:	cb 2e       	mov	r12, r27
		0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B,
		0x3C, 0x3D, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C,
		0x00 };
	
	for(i = SD_L3_DIRENT_NAMESZ; i > 0; --i) {
		*out = ' ';
     38a:	f7 01       	movw	r30, r14
     38c:	d1 92       	st	Z+, r13
     38e:	7f 01       	movw	r14, r30
		if (*in > ' ') {
     390:	f5 01       	movw	r30, r10
     392:	80 81       	ld	r24, Z
     394:	81 32       	cpi	r24, 0x21	; 33
     396:	00 f1       	brcs	.+64     	; 0x3d8 <sd_L3_convdirname+0x78>
			if (*in == '.') {
     398:	8e 32       	cpi	r24, 0x2E	; 46
     39a:	29 f4       	brne	.+10     	; 0x3a6 <sd_L3_convdirname+0x46>
				if (i > 3) {
     39c:	24 30       	cpi	r18, 0x04	; 4
     39e:	e0 f4       	brcc	.+56     	; 0x3d8 <sd_L3_convdirname+0x78>
					out++;
					continue;
				} else {
					in++;
     3a0:	08 94       	sec
     3a2:	a1 1c       	adc	r10, r1
     3a4:	b1 1c       	adc	r11, r1
				}
			}
			*out = toupper(*in++);
     3a6:	f5 01       	movw	r30, r10
     3a8:	81 91       	ld	r24, Z+
     3aa:	5f 01       	movw	r10, r30
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	29 83       	std	Y+1, r18	; 0x01
     3b0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <toupper>
     3b4:	f8 01       	movw	r30, r16
     3b6:	80 83       	st	Z, r24

			for(j = 0; ill[j] != 0x00; j++) {
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	29 81       	ldd	r18, Y+1	; 0x01
     3bc:	06 c0       	rjmp	.+12     	; 0x3ca <sd_L3_convdirname+0x6a>
				if (*out == ill[j]) {
     3be:	83 17       	cp	r24, r19
     3c0:	19 f4       	brne	.+6      	; 0x3c8 <sd_L3_convdirname+0x68>
					*out = '@';
     3c2:	f8 01       	movw	r30, r16
     3c4:	c0 82       	st	Z, r12
					break;
     3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <sd_L3_convdirname+0x78>
					in++;
				}
			}
			*out = toupper(*in++);

			for(j = 0; ill[j] != 0x00; j++) {
     3c8:	9f 5f       	subi	r25, 0xFF	; 255
     3ca:	e9 2f       	mov	r30, r25
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	e1 58       	subi	r30, 0x81	; 129
     3d0:	fe 4f       	sbci	r31, 0xFE	; 254
     3d2:	30 81       	ld	r19, Z
     3d4:	33 23       	and	r19, r19
     3d6:	99 f7       	brne	.-26     	; 0x3be <sd_L3_convdirname+0x5e>
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	0f 5f       	subi	r16, 0xFF	; 255
     3dc:	1f 4f       	sbci	r17, 0xFF	; 255
	static const char ill[] = {
		0x22, 0x2A, 0x2B, 0x2C, 0x2E, 0x2F, 0x3A, 0x3B,
		0x3C, 0x3D, 0x3E, 0x3F, 0x5B, 0x5C, 0x5D, 0x7C,
		0x00 };
	
	for(i = SD_L3_DIRENT_NAMESZ; i > 0; --i) {
     3de:	22 23       	and	r18, r18
     3e0:	a1 f6       	brne	.-88     	; 0x38a <sd_L3_convdirname+0x2a>
			}
		}
		out++;
	}
	return;
}
     3e2:	0f 90       	pop	r0
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	bf 90       	pop	r11
     3f6:	af 90       	pop	r10
     3f8:	08 95       	ret

000003fa <sd_L3_seek2sect>:
//	Data area manage (Data Region)
//---------------------------------------------------------------------
//
// convert seek address to sector number
//
long sd_L3_seek2sect(struct sd_L3_vol *vp, long seek, unsigned short firstcl) {		// sector number  -1:error
     3fa:	8f 92       	push	r8
     3fc:	9f 92       	push	r9
     3fe:	af 92       	push	r10
     400:	bf 92       	push	r11
     402:	cf 92       	push	r12
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
     414:	6a 01       	movw	r12, r20
     416:	7b 01       	movw	r14, r22
     418:	59 01       	movw	r10, r18
	long	s;							// Answer

	printf("L3seek2sect(vp=0x%08lx,seek=%ld,firstcl=0x%04x) start\n", (long)vp, seek, firstcl);
	s = -1;

	if (firstcl == SD_L3_ROOTDIRCL) {
     41a:	2d ef       	ldi	r18, 0xFD	; 253
     41c:	a2 16       	cp	r10, r18
     41e:	2f ef       	ldi	r18, 0xFF	; 255
     420:	b2 06       	cpc	r11, r18
     422:	91 f4       	brne	.+36     	; 0x448 <sd_L3_seek2sect+0x4e>
//		s = vp->RootDirSector + (seek / SD_L3_BytePerSec);
		s = vp->RootDirSector + (seek >> SD_L3_BytePerSecPow);
     424:	8a 01       	movw	r16, r20
     426:	9b 01       	movw	r18, r22
     428:	89 e0       	ldi	r24, 0x09	; 9
     42a:	35 95       	asr	r19
     42c:	27 95       	ror	r18
     42e:	17 95       	ror	r17
     430:	07 95       	ror	r16
     432:	8a 95       	dec	r24
     434:	d1 f7       	brne	.-12     	; 0x42a <sd_L3_seek2sect+0x30>
     436:	8d 81       	ldd	r24, Y+5	; 0x05
     438:	9e 81       	ldd	r25, Y+6	; 0x06
     43a:	af 81       	ldd	r26, Y+7	; 0x07
     43c:	b8 85       	ldd	r27, Y+8	; 0x08
     43e:	08 0f       	add	r16, r24
     440:	19 1f       	adc	r17, r25
     442:	2a 1f       	adc	r18, r26
     444:	3b 1f       	adc	r19, r27
     446:	6d c0       	rjmp	.+218    	; 0x522 <sd_L3_seek2sect+0x128>
		unsigned short	cl;				// Current cluster number
		unsigned short	i;

		// cluster position : n
//		n = seek / vp->BytePerClus;
		n = seek >> vp->BytePerClusPow;
     448:	db 01       	movw	r26, r22
     44a:	ca 01       	movw	r24, r20
     44c:	0d 8c       	ldd	r0, Y+29	; 0x1d
     44e:	04 c0       	rjmp	.+8      	; 0x458 <sd_L3_seek2sect+0x5e>
     450:	b5 95       	asr	r27
     452:	a7 95       	ror	r26
     454:	97 95       	ror	r25
     456:	87 95       	ror	r24
     458:	0a 94       	dec	r0
     45a:	d2 f7       	brpl	.-12     	; 0x450 <sd_L3_seek2sect+0x56>
     45c:	4c 01       	movw	r8, r24
		
		// follow cluster chaine : cl
		if ((firstcl == vp->cl_1st) && (n == vp->cl_n)) {	// cache hit
     45e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     460:	9f 8d       	ldd	r25, Y+31	; 0x1f
     462:	a8 16       	cp	r10, r24
     464:	b9 06       	cpc	r11, r25
     466:	a9 f4       	brne	.+42     	; 0x492 <sd_L3_seek2sect+0x98>
     468:	88 a1       	lds	r24, 0x48
     46a:	99 a1       	lds	r25, 0x49
     46c:	88 16       	cp	r8, r24
     46e:	99 06       	cpc	r9, r25
     470:	81 f4       	brne	.+32     	; 0x492 <sd_L3_seek2sect+0x98>
			cl = vp->cl_cl;
     472:	ea a1       	lds	r30, 0x4a
     474:	fb a1       	lds	r31, 0x4b
     476:	16 c0       	rjmp	.+44     	; 0x4a4 <sd_L3_seek2sect+0xaa>
			
		} else {
			i = n;
			for(cl = firstcl; (cl >= 2) && (cl < SD_L3_SPECIALCL); cl = sd_L3_fatentryio(vp, cl, SD_L3_READONLYCL)) {
				if (i <= 0) {
     478:	80 16       	cp	r8, r16
     47a:	91 06       	cpc	r9, r17
     47c:	99 f0       	breq	.+38     	; 0x4a4 <sd_L3_seek2sect+0xaa>
		if ((firstcl == vp->cl_1st) && (n == vp->cl_n)) {	// cache hit
			cl = vp->cl_cl;
			
		} else {
			i = n;
			for(cl = firstcl; (cl >= 2) && (cl < SD_L3_SPECIALCL); cl = sd_L3_fatentryio(vp, cl, SD_L3_READONLYCL)) {
     47e:	ce 01       	movw	r24, r28
     480:	bf 01       	movw	r22, r30
     482:	4e ef       	ldi	r20, 0xFE	; 254
     484:	5f ef       	ldi	r21, 0xFF	; 255
     486:	0e 94 69 00 	call	0xd2	; 0xd2 <sd_L3_fatentryio>
     48a:	fc 01       	movw	r30, r24
     48c:	0f 5f       	subi	r16, 0xFF	; 255
     48e:	1f 4f       	sbci	r17, 0xFF	; 255
     490:	03 c0       	rjmp	.+6      	; 0x498 <sd_L3_seek2sect+0x9e>
		// cluster position : n
//		n = seek / vp->BytePerClus;
		n = seek >> vp->BytePerClusPow;
		
		// follow cluster chaine : cl
		if ((firstcl == vp->cl_1st) && (n == vp->cl_n)) {	// cache hit
     492:	f5 01       	movw	r30, r10
     494:	00 e0       	ldi	r16, 0x00	; 0
     496:	10 e0       	ldi	r17, 0x00	; 0
			cl = vp->cl_cl;
			
		} else {
			i = n;
			for(cl = firstcl; (cl >= 2) && (cl < SD_L3_SPECIALCL); cl = sd_L3_fatentryio(vp, cl, SD_L3_READONLYCL)) {
     498:	cf 01       	movw	r24, r30
     49a:	02 97       	sbiw	r24, 0x02	; 2
     49c:	2f ef       	ldi	r18, 0xFF	; 255
     49e:	8e 3e       	cpi	r24, 0xEE	; 238
     4a0:	92 07       	cpc	r25, r18
     4a2:	50 f3       	brcs	.-44     	; 0x478 <sd_L3_seek2sect+0x7e>
				--i;
			}
		}
		
		// Calculate
		if ((cl >= 2) && (cl < SD_L3_SPECIALCL)) {
     4a4:	8f 01       	movw	r16, r30
     4a6:	02 50       	subi	r16, 0x02	; 2
     4a8:	10 40       	sbci	r17, 0x00	; 0
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	0e 3e       	cpi	r16, 0xEE	; 238
     4ae:	18 07       	cpc	r17, r24
     4b0:	70 f5       	brcc	.+92     	; 0x50e <sd_L3_seek2sect+0x114>
//			s = vp->FirstDataSector
//			  + ((cl-2) * vp->SecPerClus)
//		  	  + (seek / SD_L3_BytePerSec % vp->SecPerClus);
			s = vp->FirstDataSector
			  + ((cl-2) << vp->SecPerClusPow)
     4b2:	0f 88       	ldd	r0, Y+23	; 0x17
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <sd_L3_seek2sect+0xc0>
     4b6:	00 0f       	add	r16, r16
     4b8:	11 1f       	adc	r17, r17
     4ba:	0a 94       	dec	r0
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <sd_L3_seek2sect+0xbc>
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	89 85       	ldd	r24, Y+9	; 0x09
     4c4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4c6:	ab 85       	ldd	r26, Y+11	; 0x0b
     4c8:	bc 85       	ldd	r27, Y+12	; 0x0c
     4ca:	08 0f       	add	r16, r24
     4cc:	19 1f       	adc	r17, r25
     4ce:	2a 1f       	adc	r18, r26
     4d0:	3b 1f       	adc	r19, r27
			  + ((seek >> SD_L3_BytePerSecPow) & vp->SecPerClusMask);
     4d2:	b7 01       	movw	r22, r14
     4d4:	a6 01       	movw	r20, r12
     4d6:	03 2e       	mov	r0, r19
     4d8:	39 e0       	ldi	r19, 0x09	; 9
     4da:	75 95       	asr	r23
     4dc:	67 95       	ror	r22
     4de:	57 95       	ror	r21
     4e0:	47 95       	ror	r20
     4e2:	3a 95       	dec	r19
     4e4:	d1 f7       	brne	.-12     	; 0x4da <sd_L3_seek2sect+0xe0>
     4e6:	30 2d       	mov	r19, r0
     4e8:	88 8d       	ldd	r24, Y+24	; 0x18
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	a0 e0       	ldi	r26, 0x00	; 0
     4ee:	b0 e0       	ldi	r27, 0x00	; 0
     4f0:	48 23       	and	r20, r24
     4f2:	59 23       	and	r21, r25
     4f4:	6a 23       	and	r22, r26
     4f6:	7b 23       	and	r23, r27
		// Calculate
		if ((cl >= 2) && (cl < SD_L3_SPECIALCL)) {
//			s = vp->FirstDataSector
//			  + ((cl-2) * vp->SecPerClus)
//		  	  + (seek / SD_L3_BytePerSec % vp->SecPerClus);
			s = vp->FirstDataSector
     4f8:	04 0f       	add	r16, r20
     4fa:	15 1f       	adc	r17, r21
     4fc:	26 1f       	adc	r18, r22
     4fe:	37 1f       	adc	r19, r23
			  + ((cl-2) << vp->SecPerClusPow)
			  + ((seek >> SD_L3_BytePerSecPow) & vp->SecPerClusMask);
			
			vp->cl_1st = firstcl;		// caching
     500:	bf 8e       	std	Y+31, r11	; 0x1f
     502:	ae 8e       	std	Y+30, r10	; 0x1e
			vp->cl_n   = n;
     504:	99 a2       	lds	r25, 0x99
     506:	88 a2       	lds	r24, 0x98
			vp->cl_cl  = cl;
     508:	fb a3       	lds	r31, 0x5b
     50a:	ea a3       	lds	r30, 0x5a
     50c:	0a c0       	rjmp	.+20     	; 0x522 <sd_L3_seek2sect+0x128>
		} else {
			if (cl != SD_L3_BADCL) {
     50e:	2f ef       	ldi	r18, 0xFF	; 255
     510:	e7 3f       	cpi	r30, 0xF7	; 247
     512:	f2 07       	cpc	r31, r18
     514:	19 f0       	breq	.+6      	; 0x51c <sd_L3_seek2sect+0x122>
				sd_errno = SD_E2BIG;
     516:	87 e0       	ldi	r24, 0x07	; 7
     518:	80 93 a3 01 	sts	0x01A3, r24
//
long sd_L3_seek2sect(struct sd_L3_vol *vp, long seek, unsigned short firstcl) {		// sector number  -1:error
	long	s;							// Answer

	printf("L3seek2sect(vp=0x%08lx,seek=%ld,firstcl=0x%04x) start\n", (long)vp, seek, firstcl);
	s = -1;
     51c:	0f ef       	ldi	r16, 0xFF	; 255
     51e:	1f ef       	ldi	r17, 0xFF	; 255
     520:	98 01       	movw	r18, r16
	}
	

	printf("L3seek2sect()=%ld\n", s);
	return(s);
}
     522:	b8 01       	movw	r22, r16
     524:	c9 01       	movw	r24, r18
     526:	df 91       	pop	r29
     528:	cf 91       	pop	r28
     52a:	1f 91       	pop	r17
     52c:	0f 91       	pop	r16
     52e:	ff 90       	pop	r15
     530:	ef 90       	pop	r14
     532:	df 90       	pop	r13
     534:	cf 90       	pop	r12
     536:	bf 90       	pop	r11
     538:	af 90       	pop	r10
     53a:	9f 90       	pop	r9
     53c:	8f 90       	pop	r8
     53e:	08 95       	ret

00000540 <sd_L3_read>:
//---------------------------------------------------------------------

//
// read input
//
int sd_L3_read(struct sd_L3_fd *fp, char *buf, int bufsz) {	// Readed byte length  0>=:EOF or error
     540:	2f 92       	push	r2
     542:	3f 92       	push	r3
     544:	4f 92       	push	r4
     546:	5f 92       	push	r5
     548:	6f 92       	push	r6
     54a:	7f 92       	push	r7
     54c:	8f 92       	push	r8
     54e:	9f 92       	push	r9
     550:	af 92       	push	r10
     552:	bf 92       	push	r11
     554:	cf 92       	push	r12
     556:	df 92       	push	r13
     558:	ef 92       	push	r14
     55a:	ff 92       	push	r15
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	8c 01       	movw	r16, r24
     566:	1b 01       	movw	r2, r22
     568:	2a 01       	movw	r4, r20
	long 	unr;
	

	printf("L3read(fp=0x%08lx,*,bufsz=%d) start\n", (long)fp, bufsz);
	rd  = 0;
	sek = fp->seekpos;
     56a:	fc 01       	movw	r30, r24
     56c:	80 84       	ldd	r8, Z+8	; 0x08
     56e:	91 84       	ldd	r9, Z+9	; 0x09
     570:	a2 84       	ldd	r10, Z+10	; 0x0a
     572:	b3 84       	ldd	r11, Z+11	; 0x0b
	unr = fp->filesz - sek;
     574:	c4 80       	ldd	r12, Z+4	; 0x04
     576:	d5 80       	ldd	r13, Z+5	; 0x05
     578:	e6 80       	ldd	r14, Z+6	; 0x06
     57a:	f7 80       	ldd	r15, Z+7	; 0x07
     57c:	c8 18       	sub	r12, r8
     57e:	d9 08       	sbc	r13, r9
     580:	ea 08       	sbc	r14, r10
     582:	fb 08       	sbc	r15, r11
	long 	sek;
	long 	unr;
	

	printf("L3read(fp=0x%08lx,*,bufsz=%d) start\n", (long)fp, bufsz);
	rd  = 0;
     584:	66 24       	eor	r6, r6
     586:	77 24       	eor	r7, r7
	sek = fp->seekpos;
	unr = fp->filesz - sek;
	
	while((bufsz > 0) && (unr > 0)) {
     588:	44 c0       	rjmp	.+136    	; 0x612 <sd_L3_read+0xd2>
			break;
		}
#endif
		
		// Get target sect#
		s = sd_L3_seek2sect(fp->vp, sek, fp->firstcl);
     58a:	f8 01       	movw	r30, r16
     58c:	22 81       	ldd	r18, Z+2	; 0x02
     58e:	33 81       	ldd	r19, Z+3	; 0x03
     590:	80 89       	ldd	r24, Z+16	; 0x10
     592:	91 89       	ldd	r25, Z+17	; 0x11
     594:	b5 01       	movw	r22, r10
     596:	a4 01       	movw	r20, r8
     598:	0e 94 fd 01 	call	0x3fa	; 0x3fa <sd_L3_seek2sect>
     59c:	ab 01       	movw	r20, r22
     59e:	bc 01       	movw	r22, r24
		if (s < 0) {
     5a0:	77 fd       	sbrc	r23, 7
     5a2:	58 c0       	rjmp	.+176    	; 0x654 <sd_L3_read+0x114>
			rd = -1;
			break;
		}
		
		// Read target sect
		if (sd_L2_read(fp->pp, s) != 0) {
     5a4:	f8 01       	movw	r30, r16
     5a6:	82 89       	ldd	r24, Z+18	; 0x12
     5a8:	93 89       	ldd	r25, Z+19	; 0x13
     5aa:	0e 94 a3 0b 	call	0x1746	; 0x1746 <sd_L2_read>
     5ae:	88 23       	and	r24, r24
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <sd_L3_read+0x74>
     5b2:	50 c0       	rjmp	.+160    	; 0x654 <sd_L3_read+0x114>
			break;
		}
		
		// Transfer to user buffer
		//			pos = sek % SD_L3_BytePerSec;
		pos = sek & SD_L3_BytePerSecMask;
     5b4:	c4 01       	movw	r24, r8
     5b6:	91 70       	andi	r25, 0x01	; 1
			p = &sd_buf2[pos & 0xff];
		} else {
			p = &sd_buf1[pos];
		}
#else
		rem = SD_L3_BytePerSec - pos;
     5b8:	c0 e0       	ldi	r28, 0x00	; 0
     5ba:	d2 e0       	ldi	r29, 0x02	; 2
     5bc:	c8 1b       	sub	r28, r24
     5be:	d9 0b       	sbc	r29, r25
		p = &sd_buf[pos];
     5c0:	bc 01       	movw	r22, r24
     5c2:	6a 53       	subi	r22, 0x3A	; 58
     5c4:	7e 4f       	sbci	r23, 0xFE	; 254
#endif
		if (rem > unr) {
     5c6:	ce 01       	movw	r24, r28
     5c8:	aa 27       	eor	r26, r26
     5ca:	97 fd       	sbrc	r25, 7
     5cc:	a0 95       	com	r26
     5ce:	ba 2f       	mov	r27, r26
     5d0:	c8 16       	cp	r12, r24
     5d2:	d9 06       	cpc	r13, r25
     5d4:	ea 06       	cpc	r14, r26
     5d6:	fb 06       	cpc	r15, r27
     5d8:	0c f4       	brge	.+2      	; 0x5dc <sd_L3_read+0x9c>
			rem = unr;
     5da:	e6 01       	movw	r28, r12
     5dc:	4c 16       	cp	r4, r28
     5de:	5d 06       	cpc	r5, r29
     5e0:	0c f4       	brge	.+2      	; 0x5e4 <sd_L3_read+0xa4>
     5e2:	e2 01       	movw	r28, r4
		}
		if (bufsz < rem) {
			rem = bufsz;
		}
		sd_memcpy(buf, p, rem);
     5e4:	c1 01       	movw	r24, r2
     5e6:	ae 01       	movw	r20, r28
     5e8:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <memcpy>
		printf("sek=%ld ", sek);
		printf("unr=%ld ", unr);
		printf("rd=%d\n", rd);
		
		// seek pos update
		sek   += rem;
     5ec:	ce 01       	movw	r24, r28
     5ee:	aa 27       	eor	r26, r26
     5f0:	97 fd       	sbrc	r25, 7
     5f2:	a0 95       	com	r26
     5f4:	ba 2f       	mov	r27, r26
     5f6:	88 0e       	add	r8, r24
     5f8:	99 1e       	adc	r9, r25
     5fa:	aa 1e       	adc	r10, r26
     5fc:	bb 1e       	adc	r11, r27
		rd    += rem;
     5fe:	6c 0e       	add	r6, r28
     600:	7d 1e       	adc	r7, r29
		unr   -= rem;
     602:	c8 1a       	sub	r12, r24
     604:	d9 0a       	sbc	r13, r25
     606:	ea 0a       	sbc	r14, r26
     608:	fb 0a       	sbc	r15, r27
		bufsz -= rem;
     60a:	4c 1a       	sub	r4, r28
     60c:	5d 0a       	sbc	r5, r29
		buf   += rem;
     60e:	2c 0e       	add	r2, r28
     610:	3d 1e       	adc	r3, r29
	printf("L3read(fp=0x%08lx,*,bufsz=%d) start\n", (long)fp, bufsz);
	rd  = 0;
	sek = fp->seekpos;
	unr = fp->filesz - sek;
	
	while((bufsz > 0) && (unr > 0)) {
     612:	14 14       	cp	r1, r4
     614:	15 04       	cpc	r1, r5
     616:	34 f4       	brge	.+12     	; 0x624 <sd_L3_read+0xe4>
     618:	1c 14       	cp	r1, r12
     61a:	1d 04       	cpc	r1, r13
     61c:	1e 04       	cpc	r1, r14
     61e:	1f 04       	cpc	r1, r15
     620:	0c f4       	brge	.+2      	; 0x624 <sd_L3_read+0xe4>
     622:	b3 cf       	rjmp	.-154    	; 0x58a <sd_L3_read+0x4a>
     624:	c3 01       	movw	r24, r6
		unr   -= rem;
		bufsz -= rem;
		buf   += rem;
	}
	
	if (rd > 0) {
     626:	61 14       	cp	r6, r1
     628:	71 04       	cpc	r7, r1
     62a:	b1 f0       	breq	.+44     	; 0x658 <sd_L3_read+0x118>
		fp->seekpos += rd;
     62c:	a3 01       	movw	r20, r6
     62e:	66 27       	eor	r22, r22
     630:	57 fd       	sbrc	r21, 7
     632:	60 95       	com	r22
     634:	76 2f       	mov	r23, r22
     636:	f8 01       	movw	r30, r16
     638:	80 85       	ldd	r24, Z+8	; 0x08
     63a:	91 85       	ldd	r25, Z+9	; 0x09
     63c:	a2 85       	ldd	r26, Z+10	; 0x0a
     63e:	b3 85       	ldd	r27, Z+11	; 0x0b
     640:	84 0f       	add	r24, r20
     642:	95 1f       	adc	r25, r21
     644:	a6 1f       	adc	r26, r22
     646:	b7 1f       	adc	r27, r23
     648:	80 87       	std	Z+8, r24	; 0x08
     64a:	91 87       	std	Z+9, r25	; 0x09
     64c:	a2 87       	std	Z+10, r26	; 0x0a
     64e:	b3 87       	std	Z+11, r27	; 0x0b
     650:	c3 01       	movw	r24, r6
     652:	02 c0       	rjmp	.+4      	; 0x658 <sd_L3_read+0x118>
			rd = -1;
			break;
		}
		
		// Read target sect
		if (sd_L2_read(fp->pp, s) != 0) {
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	printf("L3read(*,buf='%-8.8s...',*)=%d\n", (buf-rd), rd);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L3read=");i2c_lcd_prHexInt((int)fp);i2c_lcd_prHexInt(rd);
	return(rd);
}
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	ff 90       	pop	r15
     662:	ef 90       	pop	r14
     664:	df 90       	pop	r13
     666:	cf 90       	pop	r12
     668:	bf 90       	pop	r11
     66a:	af 90       	pop	r10
     66c:	9f 90       	pop	r9
     66e:	8f 90       	pop	r8
     670:	7f 90       	pop	r7
     672:	6f 90       	pop	r6
     674:	5f 90       	pop	r5
     676:	4f 90       	pop	r4
     678:	3f 90       	pop	r3
     67a:	2f 90       	pop	r2
     67c:	08 95       	ret

0000067e <sd_L3_lseek>:
#endif //SD_OPT_WRITE

//
// reposition read/write file offset
//
long sd_L3_lseek(struct sd_L3_fd *fp, long offset, char whence){ // Absolute seek posotion
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	fc 01       	movw	r30, r24
			sd_errno = SD_EBADF;
			break;
		}
#endif

		switch(whence) {
     684:	21 30       	cpi	r18, 0x01	; 1
     686:	29 f0       	breq	.+10     	; 0x692 <sd_L3_lseek+0x14>
     688:	21 30       	cpi	r18, 0x01	; 1
     68a:	c0 f0       	brcs	.+48     	; 0x6bc <sd_L3_lseek+0x3e>
     68c:	22 30       	cpi	r18, 0x02	; 2
     68e:	79 f4       	brne	.+30     	; 0x6ae <sd_L3_lseek+0x30>
     690:	09 c0       	rjmp	.+18     	; 0x6a4 <sd_L3_lseek+0x26>
			case SD_SEEK_SET:
				s = offset;
				break;
			case SD_SEEK_CUR:
				s = fp->seekpos + offset;	// enable size < seek
     692:	00 85       	ldd	r16, Z+8	; 0x08
     694:	11 85       	ldd	r17, Z+9	; 0x09
     696:	22 85       	ldd	r18, Z+10	; 0x0a
     698:	33 85       	ldd	r19, Z+11	; 0x0b
     69a:	04 0f       	add	r16, r20
     69c:	15 1f       	adc	r17, r21
     69e:	26 1f       	adc	r18, r22
     6a0:	37 1f       	adc	r19, r23
				break;
     6a2:	0e c0       	rjmp	.+28     	; 0x6c0 <sd_L3_lseek+0x42>
			case SD_SEEK_END:
				s = fp->filesz;
     6a4:	04 81       	ldd	r16, Z+4	; 0x04
     6a6:	15 81       	ldd	r17, Z+5	; 0x05
     6a8:	26 81       	ldd	r18, Z+6	; 0x06
     6aa:	37 81       	ldd	r19, Z+7	; 0x07
				break;
     6ac:	09 c0       	rjmp	.+18     	; 0x6c0 <sd_L3_lseek+0x42>
			default:
				sd_errno = SD_EINVAL;
     6ae:	86 e1       	ldi	r24, 0x16	; 22
     6b0:	80 93 a3 01 	sts	0x01A3, r24
//
long sd_L3_lseek(struct sd_L3_fd *fp, long offset, char whence){ // Absolute seek posotion
	long	s;

	printf("L3lseek(fp=0x%08lx,offset=%ld,whence=%d) start\n", (long)fp, offset, whence);
	s = -1;
     6b4:	0f ef       	ldi	r16, 0xFF	; 255
     6b6:	1f ef       	ldi	r17, 0xFF	; 255
     6b8:	98 01       	movw	r18, r16
     6ba:	08 c0       	rjmp	.+16     	; 0x6cc <sd_L3_lseek+0x4e>
		}
#endif

		switch(whence) {
			case SD_SEEK_SET:
				s = offset;
     6bc:	8a 01       	movw	r16, r20
     6be:	9b 01       	movw	r18, r22
				break;
			default:
				sd_errno = SD_EINVAL;
				break;
		}
		if (s >= 0) {
     6c0:	37 fd       	sbrc	r19, 7
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <sd_L3_lseek+0x4e>
			fp->seekpos = s;
     6c4:	00 87       	std	Z+8, r16	; 0x08
     6c6:	11 87       	std	Z+9, r17	; 0x09
     6c8:	22 87       	std	Z+10, r18	; 0x0a
     6ca:	33 87       	std	Z+11, r19	; 0x0b
	}
	
	printf("L3lseek()=%ld\n", s);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L3lseek=");i2c_lcd_prHexInt(s);
	return(s);
}
     6cc:	b8 01       	movw	r22, r16
     6ce:	c9 01       	movw	r24, r18
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	08 95       	ret

000006d6 <sd_L3_finddir>:

//
// find directory entry (internal)
//
signed char sd_L3_finddir(struct sd_L3_vol *vp, struct sd_L3_dirent *de, char *dname, char len){	// 1:found 0:not found -1:error
     6d6:	af 92       	push	r10
     6d8:	bf 92       	push	r11
     6da:	df 92       	push	r13
     6dc:	ef 92       	push	r14
     6de:	ff 92       	push	r15
     6e0:	0f 93       	push	r16
     6e2:	1f 93       	push	r17
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	7c 01       	movw	r14, r24
     6ea:	8b 01       	movw	r16, r22
     6ec:	5a 01       	movw	r10, r20
     6ee:	d2 2e       	mov	r13, r18
	signed char	rc;
	
	printf("L3finddir(vp=0x%08lx,de=0x%08lx,dname=%-11.11s,len=%d) start\n", (long)vp, (long)de, dname, len);
	rc = -1;

	if (sd_L3_lseek(vp->dirfp, 0, SD_SEEK_SET) >= 0) {	// Rewind
     6f0:	fc 01       	movw	r30, r24
     6f2:	84 a1       	lds	r24, 0x44
     6f4:	95 a1       	lds	r25, 0x45
     6f6:	40 e0       	ldi	r20, 0x00	; 0
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	ba 01       	movw	r22, r20
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	0e 94 3f 03 	call	0x67e	; 0x67e <sd_L3_lseek>
     702:	dc 01       	movw	r26, r24
     704:	cb 01       	movw	r24, r22
     706:	b7 fd       	sbrc	r27, 7
     708:	21 c0       	rjmp	.+66     	; 0x74c <sd_L3_finddir+0x76>
		while(rc < 0) {
			if (sd_L3_read(vp->dirfp, (char *)de, sizeof(struct sd_L3_dirent)) != sizeof(sd_L3_tempdirent)) {
				break;
			}
			if (de->Name[0] == 0x00) {
				sd_errno = SD_ENOENT;
     70a:	d2 e0       	ldi	r29, 0x02	; 2
	printf("L3finddir(vp=0x%08lx,de=0x%08lx,dname=%-11.11s,len=%d) start\n", (long)vp, (long)de, dname, len);
	rc = -1;

	if (sd_L3_lseek(vp->dirfp, 0, SD_SEEK_SET) >= 0) {	// Rewind
		while(rc < 0) {
			if (sd_L3_read(vp->dirfp, (char *)de, sizeof(struct sd_L3_dirent)) != sizeof(sd_L3_tempdirent)) {
     70c:	f7 01       	movw	r30, r14
     70e:	84 a1       	lds	r24, 0x44
     710:	95 a1       	lds	r25, 0x45
     712:	b8 01       	movw	r22, r16
     714:	40 e2       	ldi	r20, 0x20	; 32
     716:	50 e0       	ldi	r21, 0x00	; 0
     718:	0e 94 a0 02 	call	0x540	; 0x540 <sd_L3_read>
     71c:	80 32       	cpi	r24, 0x20	; 32
     71e:	91 05       	cpc	r25, r1
     720:	a9 f4       	brne	.+42     	; 0x74c <sd_L3_finddir+0x76>
				break;
			}
			if (de->Name[0] == 0x00) {
     722:	f8 01       	movw	r30, r16
     724:	80 81       	ld	r24, Z
     726:	88 23       	and	r24, r24
     728:	21 f4       	brne	.+8      	; 0x732 <sd_L3_finddir+0x5c>
				sd_errno = SD_ENOENT;
     72a:	d0 93 a3 01 	sts	0x01A3, r29
				rc = 0;
     72e:	c0 e0       	ldi	r28, 0x00	; 0
     730:	01 c0       	rjmp	.+2      	; 0x734 <sd_L3_finddir+0x5e>
	if (sd_L3_lseek(vp->dirfp, 0, SD_SEEK_SET) >= 0) {	// Rewind
		while(rc < 0) {
			if (sd_L3_read(vp->dirfp, (char *)de, sizeof(struct sd_L3_dirent)) != sizeof(sd_L3_tempdirent)) {
				break;
			}
			if (de->Name[0] == 0x00) {
     732:	cf ef       	ldi	r28, 0xFF	; 255
				sd_errno = SD_ENOENT;
				rc = 0;
			}
			if (!sd_strncmp(de->Name, dname, len)) {
     734:	c8 01       	movw	r24, r16
     736:	b5 01       	movw	r22, r10
     738:	4d 2d       	mov	r20, r13
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <strncmp>
     740:	00 97       	sbiw	r24, 0x00	; 0
     742:	31 f0       	breq	.+12     	; 0x750 <sd_L3_finddir+0x7a>
	
	printf("L3finddir(vp=0x%08lx,de=0x%08lx,dname=%-11.11s,len=%d) start\n", (long)vp, (long)de, dname, len);
	rc = -1;

	if (sd_L3_lseek(vp->dirfp, 0, SD_SEEK_SET) >= 0) {	// Rewind
		while(rc < 0) {
     744:	cf 3f       	cpi	r28, 0xFF	; 255
     746:	11 f3       	breq	.-60     	; 0x70c <sd_L3_finddir+0x36>
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	03 c0       	rjmp	.+6      	; 0x752 <sd_L3_finddir+0x7c>
			if (sd_L3_read(vp->dirfp, (char *)de, sizeof(struct sd_L3_dirent)) != sizeof(sd_L3_tempdirent)) {
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	01 c0       	rjmp	.+2      	; 0x752 <sd_L3_finddir+0x7c>
			if (de->Name[0] == 0x00) {
				sd_errno = SD_ENOENT;
				rc = 0;
			}
			if (!sd_strncmp(de->Name, dname, len)) {
				rc = 1;
     750:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	printf("L3finddir()=%d\n", rc);
	return(rc);
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	bf 90       	pop	r11
     762:	af 90       	pop	r10
     764:	08 95       	ret

00000766 <sd_L3_sync>:

//
// sync buffer - device
//
#ifdef SD_OPT_WRITE
signed char sd_L3_sync(struct sd_L3_fd *fp) {	// 0:normal -1:error
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
     76e:	ec 01       	movw	r28, r24
	signed char			rc;
	struct sd_L3_vol	*vp;

	printf("L3sync(fp=0x%08lx) start\n", (long)fp);
	rc = -1;
	vp = fp->vp;
     770:	08 89       	ldd	r16, Y+16	; 0x10
     772:	19 89       	ldd	r17, Y+17	; 0x11
			break;
		}
#endif

		// Directory update
		if ((fp->wflg & SD_L3_WFLG_WD) && (fp->dirloc >= 0)) {
     774:	89 81       	ldd	r24, Y+1	; 0x01
     776:	81 ff       	sbrs	r24, 1
     778:	63 c0       	rjmp	.+198    	; 0x840 <sd_L3_sync+0xda>
     77a:	4c 85       	ldd	r20, Y+12	; 0x0c
     77c:	5d 85       	ldd	r21, Y+13	; 0x0d
     77e:	6e 85       	ldd	r22, Y+14	; 0x0e
     780:	7f 85       	ldd	r23, Y+15	; 0x0f
     782:	77 fd       	sbrc	r23, 7
     784:	5d c0       	rjmp	.+186    	; 0x840 <sd_L3_sync+0xda>
			if (sd_L3_lseek(vp->dirfp, fp->dirloc, SD_SEEK_SET) <= 0) {
     786:	f8 01       	movw	r30, r16
     788:	84 a1       	lds	r24, 0x44
     78a:	95 a1       	lds	r25, 0x45
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	0e 94 3f 03 	call	0x67e	; 0x67e <sd_L3_lseek>
     792:	dc 01       	movw	r26, r24
     794:	cb 01       	movw	r24, r22
     796:	18 16       	cp	r1, r24
     798:	19 06       	cpc	r1, r25
     79a:	1a 06       	cpc	r1, r26
     79c:	1b 06       	cpc	r1, r27
     79e:	0c f0       	brlt	.+2      	; 0x7a2 <sd_L3_sync+0x3c>
     7a0:	59 c0       	rjmp	.+178    	; 0x854 <sd_L3_sync+0xee>
				break;
			}
			if (sd_L3_read(vp->dirfp, (char *)&sd_L3_tempdirent, sizeof(sd_L3_tempdirent)) != sizeof(sd_L3_tempdirent)) {
     7a2:	f8 01       	movw	r30, r16
     7a4:	84 a1       	lds	r24, 0x44
     7a6:	95 a1       	lds	r25, 0x45
     7a8:	64 ea       	ldi	r22, 0xA4	; 164
     7aa:	71 e0       	ldi	r23, 0x01	; 1
     7ac:	40 e2       	ldi	r20, 0x20	; 32
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	0e 94 a0 02 	call	0x540	; 0x540 <sd_L3_read>
     7b4:	80 32       	cpi	r24, 0x20	; 32
     7b6:	91 05       	cpc	r25, r1
     7b8:	09 f0       	breq	.+2      	; 0x7bc <sd_L3_sync+0x56>
     7ba:	4c c0       	rjmp	.+152    	; 0x854 <sd_L3_sync+0xee>
				break;
			}
			sd_bounconv2(sd_L3_tempdirent.FstClusLO, fp->firstcl);
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	9b 81       	ldd	r25, Y+3	; 0x03
     7c0:	90 93 bf 01 	sts	0x01BF, r25
     7c4:	80 93 be 01 	sts	0x01BE, r24
			sd_bounconv4(sd_L3_tempdirent.FileSize,  fp->filesz);
     7c8:	8c 81       	ldd	r24, Y+4	; 0x04
     7ca:	9d 81       	ldd	r25, Y+5	; 0x05
     7cc:	ae 81       	ldd	r26, Y+6	; 0x06
     7ce:	bf 81       	ldd	r27, Y+7	; 0x07
     7d0:	80 93 c0 01 	sts	0x01C0, r24
     7d4:	90 93 c1 01 	sts	0x01C1, r25
     7d8:	a0 93 c2 01 	sts	0x01C2, r26
     7dc:	b0 93 c3 01 	sts	0x01C3, r27
			sd_bounconv2(sd_L3_tempdirent.CrtTime, sd_L3_NowTime);
     7e0:	80 91 a0 01 	lds	r24, 0x01A0
     7e4:	90 91 a1 01 	lds	r25, 0x01A1
     7e8:	90 93 b3 01 	sts	0x01B3, r25
     7ec:	80 93 b2 01 	sts	0x01B2, r24
			sd_bounconv2(sd_L3_tempdirent.CrtDate, sd_L3_NowDate);
     7f0:	80 91 7d 01 	lds	r24, 0x017D
     7f4:	90 91 7e 01 	lds	r25, 0x017E
     7f8:	90 93 b5 01 	sts	0x01B5, r25
     7fc:	80 93 b4 01 	sts	0x01B4, r24
			if (sd_L3_lseek(vp->dirfp, fp->dirloc, SD_SEEK_SET) <= 0) {
     800:	4c 85       	ldd	r20, Y+12	; 0x0c
     802:	5d 85       	ldd	r21, Y+13	; 0x0d
     804:	6e 85       	ldd	r22, Y+14	; 0x0e
     806:	7f 85       	ldd	r23, Y+15	; 0x0f
     808:	f8 01       	movw	r30, r16
     80a:	84 a1       	lds	r24, 0x44
     80c:	95 a1       	lds	r25, 0x45
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	0e 94 3f 03 	call	0x67e	; 0x67e <sd_L3_lseek>
     814:	dc 01       	movw	r26, r24
     816:	cb 01       	movw	r24, r22
     818:	18 16       	cp	r1, r24
     81a:	19 06       	cpc	r1, r25
     81c:	1a 06       	cpc	r1, r26
     81e:	1b 06       	cpc	r1, r27
     820:	cc f4       	brge	.+50     	; 0x854 <sd_L3_sync+0xee>
				break;
			}
			if (sd_L3_write(vp->dirfp, (char *)&sd_L3_tempdirent, sizeof(sd_L3_tempdirent)) != sizeof(sd_L3_tempdirent)) {
     822:	f8 01       	movw	r30, r16
     824:	84 a1       	lds	r24, 0x44
     826:	95 a1       	lds	r25, 0x45
     828:	64 ea       	ldi	r22, 0xA4	; 164
     82a:	71 e0       	ldi	r23, 0x01	; 1
     82c:	40 e2       	ldi	r20, 0x20	; 32
     82e:	50 e0       	ldi	r21, 0x00	; 0
     830:	0e 94 32 04 	call	0x864	; 0x864 <sd_L3_write>
     834:	80 32       	cpi	r24, 0x20	; 32
     836:	91 05       	cpc	r25, r1
     838:	69 f4       	brne	.+26     	; 0x854 <sd_L3_sync+0xee>
				break;
			}
			fp->wflg &= ~SD_L3_WFLG_WD;
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	8d 7f       	andi	r24, 0xFD	; 253
     83e:	89 83       	std	Y+1, r24	; 0x01
		}

		// Delayed write trigger
		if (sd_L2_read(vp->pp, 0) != 0) {
     840:	f8 01       	movw	r30, r16
     842:	86 a1       	lds	r24, 0x46
     844:	97 a1       	lds	r25, 0x47
     846:	40 e0       	ldi	r20, 0x00	; 0
     848:	50 e0       	ldi	r21, 0x00	; 0
     84a:	ba 01       	movw	r22, r20
     84c:	0e 94 a3 0b 	call	0x1746	; 0x1746 <sd_L2_read>
     850:	88 23       	and	r24, r24
     852:	11 f0       	breq	.+4      	; 0x858 <sd_L3_sync+0xf2>
signed char sd_L3_sync(struct sd_L3_fd *fp) {	// 0:normal -1:error
	signed char			rc;
	struct sd_L3_vol	*vp;

	printf("L3sync(fp=0x%08lx) start\n", (long)fp);
	rc = -1;
     854:	8f ef       	ldi	r24, 0xFF	; 255
     856:	01 c0       	rjmp	.+2      	; 0x85a <sd_L3_sync+0xf4>
		// Delayed write trigger
		if (sd_L2_read(vp->pp, 0) != 0) {
			break;
		}
		
		rc = 0;
     858:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	printf("L3sync()=%d\n", rc);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L3sync=");i2c_lcd_prHexInt((int)fp);i2c_lcd_prHexByte(rc);
	return(rc);
}
     85a:	df 91       	pop	r29
     85c:	cf 91       	pop	r28
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	08 95       	ret

00000864 <sd_L3_write>:

//
// write output
//
#ifdef SD_OPT_WRITE
int sd_L3_write(struct sd_L3_fd *fp, char *buf, int bufsz) {	// Writed byte length  0>=:error
     864:	2f 92       	push	r2
     866:	3f 92       	push	r3
     868:	4f 92       	push	r4
     86a:	5f 92       	push	r5
     86c:	6f 92       	push	r6
     86e:	7f 92       	push	r7
     870:	8f 92       	push	r8
     872:	9f 92       	push	r9
     874:	af 92       	push	r10
     876:	bf 92       	push	r11
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	ec 01       	movw	r28, r24
     88a:	1b 01       	movw	r2, r22
     88c:	5a 01       	movw	r10, r20
	int wd;
	
	printf("L3write(fp=0x%08lx,buf='%-8.8s...',bufsz=%d) start\n", (long)fp, buf, bufsz);
	wd = 0;
	
	if (fp->wflg & SD_L3_WFLG_RO) {
     88e:	89 81       	ldd	r24, Y+1	; 0x01
     890:	80 ff       	sbrs	r24, 0
     892:	06 c0       	rjmp	.+12     	; 0x8a0 <sd_L3_write+0x3c>
		sd_errno = SD_EACCES;
     894:	8d e0       	ldi	r24, 0x0D	; 13
     896:	80 93 a3 01 	sts	0x01A3, r24
#ifdef SD_OPT_WRITE
int sd_L3_write(struct sd_L3_fd *fp, char *buf, int bufsz) {	// Writed byte length  0>=:error
	int wd;
	
	printf("L3write(fp=0x%08lx,buf='%-8.8s...',bufsz=%d) start\n", (long)fp, buf, bufsz);
	wd = 0;
     89a:	88 24       	eor	r8, r8
     89c:	99 24       	eor	r9, r9
     89e:	85 c0       	rjmp	.+266    	; 0x9aa <__stack+0xab>
#endif

	} else {
		long sek;
		
		sek = fp->seekpos;
     8a0:	48 84       	ldd	r4, Y+8	; 0x08
     8a2:	59 84       	ldd	r5, Y+9	; 0x09
     8a4:	6a 84       	ldd	r6, Y+10	; 0x0a
     8a6:	7b 84       	ldd	r7, Y+11	; 0x0b
#ifdef SD_OPT_WRITE
int sd_L3_write(struct sd_L3_fd *fp, char *buf, int bufsz) {	// Writed byte length  0>=:error
	int wd;
	
	printf("L3write(fp=0x%08lx,buf='%-8.8s...',bufsz=%d) start\n", (long)fp, buf, bufsz);
	wd = 0;
     8a8:	88 24       	eor	r8, r8
     8aa:	99 24       	eor	r9, r9

	} else {
		long sek;
		
		sek = fp->seekpos;
		while(bufsz > 0) {
     8ac:	59 c0       	rjmp	.+178    	; 0x960 <__stack+0x61>
			
			// Get target sect#
			while((s = sd_L3_seek2sect(fp->vp, sek, fp->firstcl)) < 0) {
				unsigned short cl;
				
				if (sd_errno != SD_E2BIG) {
     8ae:	80 91 a3 01 	lds	r24, 0x01A3
     8b2:	87 30       	cpi	r24, 0x07	; 7
     8b4:	09 f0       	breq	.+2      	; 0x8b8 <sd_L3_write+0x54>
     8b6:	58 c0       	rjmp	.+176    	; 0x968 <__stack+0x69>
					break;
				}
				
				// growth storage
				cl = sd_L3_alloccl(fp->vp, fp->firstcl);
     8b8:	6a 81       	ldd	r22, Y+2	; 0x02
     8ba:	7b 81       	ldd	r23, Y+3	; 0x03
     8bc:	88 89       	ldd	r24, Y+16	; 0x10
     8be:	99 89       	ldd	r25, Y+17	; 0x11
     8c0:	0e 94 24 01 	call	0x248	; 0x248 <sd_L3_alloccl>
     8c4:	9c 01       	movw	r18, r24
				
				// 1st grow, chaining root
				if (fp->firstcl == 0) {
     8c6:	8a 81       	ldd	r24, Y+2	; 0x02
     8c8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ca:	00 97       	sbiw	r24, 0x00	; 0
     8cc:	51 f4       	brne	.+20     	; 0x8e2 <sd_L3_write+0x7e>
					fp->firstcl = cl;
     8ce:	3b 83       	std	Y+3, r19	; 0x03
     8d0:	2a 83       	std	Y+2, r18	; 0x02
					fp->wflg   |= SD_L3_WFLG_WD;
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	82 60       	ori	r24, 0x02	; 2
     8d6:	89 83       	std	Y+1, r24	; 0x01

					if (sd_L3_sync(fp) < 0) {
     8d8:	ce 01       	movw	r24, r28
     8da:	0e 94 b3 03 	call	0x766	; 0x766 <sd_L3_sync>
     8de:	87 fd       	sbrc	r24, 7
     8e0:	43 c0       	rjmp	.+134    	; 0x968 <__stack+0x69>
			int		pos;
			int		rem;
			char	*p;
			
			// Get target sect#
			while((s = sd_L3_seek2sect(fp->vp, sek, fp->firstcl)) < 0) {
     8e2:	2a 81       	ldd	r18, Y+2	; 0x02
     8e4:	3b 81       	ldd	r19, Y+3	; 0x03
     8e6:	88 89       	ldd	r24, Y+16	; 0x10
     8e8:	99 89       	ldd	r25, Y+17	; 0x11
     8ea:	b3 01       	movw	r22, r6
     8ec:	a2 01       	movw	r20, r4
     8ee:	0e 94 fd 01 	call	0x3fa	; 0x3fa <sd_L3_seek2sect>
     8f2:	6b 01       	movw	r12, r22
     8f4:	7c 01       	movw	r14, r24
     8f6:	97 fd       	sbrc	r25, 7
     8f8:	da cf       	rjmp	.-76     	; 0x8ae <sd_L3_write+0x4a>
     8fa:	6b c0       	rjmp	.+214    	; 0x9d2 <__stack+0xd3>
				break;
			}
			
			// Read target sect
			if (bufsz < SD_L3_BytePerSec) {
				if (sd_L2_read(fp->pp, s) != 0) {
     8fc:	8a 89       	ldd	r24, Y+18	; 0x12
     8fe:	9b 89       	ldd	r25, Y+19	; 0x13
     900:	b7 01       	movw	r22, r14
     902:	a6 01       	movw	r20, r12
     904:	0e 94 a3 0b 	call	0x1746	; 0x1746 <sd_L2_read>
     908:	88 23       	and	r24, r24
     90a:	71 f5       	brne	.+92     	; 0x968 <__stack+0x69>
				}
			}
			
			// Transfer to user buffer
//			pos = sek % SD_L3_BytePerSec;
			pos = sek & SD_L3_BytePerSecMask;
     90c:	c2 01       	movw	r24, r4
     90e:	91 70       	andi	r25, 0x01	; 1
			if (rem == 0) {
				rem = 256;
			}
#else
			p = &sd_buf[pos];
			rem = SD_L3_BytePerSec - pos;
     910:	00 e0       	ldi	r16, 0x00	; 0
     912:	12 e0       	ldi	r17, 0x02	; 2
     914:	08 1b       	sub	r16, r24
     916:	19 0b       	sbc	r17, r25
     918:	a0 16       	cp	r10, r16
     91a:	b1 06       	cpc	r11, r17
     91c:	0c f4       	brge	.+2      	; 0x920 <__stack+0x21>
     91e:	85 01       	movw	r16, r10
#endif
			if (bufsz < rem) {
				rem = bufsz;
			}
			sd_memcpy(p, buf, rem);
     920:	8a 53       	subi	r24, 0x3A	; 58
     922:	9e 4f       	sbci	r25, 0xFE	; 254
     924:	b1 01       	movw	r22, r2
     926:	a8 01       	movw	r20, r16
     928:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <memcpy>
			
			// Rewrite
			if (sd_L2_write(fp->pp, s) != 0) {
     92c:	8a 89       	ldd	r24, Y+18	; 0x12
     92e:	9b 89       	ldd	r25, Y+19	; 0x13
     930:	b7 01       	movw	r22, r14
     932:	a6 01       	movw	r20, r12
     934:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <sd_L2_write>
     938:	88 23       	and	r24, r24
     93a:	b1 f4       	brne	.+44     	; 0x968 <__stack+0x69>
				break;
			}
			fp->wflg |= SD_L3_WFLG_WD;
     93c:	89 81       	ldd	r24, Y+1	; 0x01
     93e:	82 60       	ori	r24, 0x02	; 2
     940:	89 83       	std	Y+1, r24	; 0x01
			
			// seek pos update
			sek   += rem;
     942:	c8 01       	movw	r24, r16
     944:	aa 27       	eor	r26, r26
     946:	97 fd       	sbrc	r25, 7
     948:	a0 95       	com	r26
     94a:	ba 2f       	mov	r27, r26
     94c:	48 0e       	add	r4, r24
     94e:	59 1e       	adc	r5, r25
     950:	6a 1e       	adc	r6, r26
     952:	7b 1e       	adc	r7, r27
			wd    += rem;
     954:	80 0e       	add	r8, r16
     956:	91 1e       	adc	r9, r17
			bufsz -= rem;
     958:	a0 1a       	sub	r10, r16
     95a:	b1 0a       	sbc	r11, r17
			buf   += rem;
     95c:	20 0e       	add	r2, r16
     95e:	31 1e       	adc	r3, r17

	} else {
		long sek;
		
		sek = fp->seekpos;
		while(bufsz > 0) {
     960:	1a 14       	cp	r1, r10
     962:	1b 04       	cpc	r1, r11
     964:	0c f4       	brge	.+2      	; 0x968 <__stack+0x69>
     966:	bd cf       	rjmp	.-134    	; 0x8e2 <sd_L3_write+0x7e>
			bufsz -= rem;
			buf   += rem;
			
		}
	}
	if (wd > 0) {
     968:	81 14       	cp	r8, r1
     96a:	91 04       	cpc	r9, r1
     96c:	f1 f0       	breq	.+60     	; 0x9aa <__stack+0xab>
		fp->seekpos += wd;
     96e:	c4 01       	movw	r24, r8
     970:	aa 27       	eor	r26, r26
     972:	97 fd       	sbrc	r25, 7
     974:	a0 95       	com	r26
     976:	ba 2f       	mov	r27, r26
     978:	48 85       	ldd	r20, Y+8	; 0x08
     97a:	59 85       	ldd	r21, Y+9	; 0x09
     97c:	6a 85       	ldd	r22, Y+10	; 0x0a
     97e:	7b 85       	ldd	r23, Y+11	; 0x0b
     980:	84 0f       	add	r24, r20
     982:	95 1f       	adc	r25, r21
     984:	a6 1f       	adc	r26, r22
     986:	b7 1f       	adc	r27, r23
     988:	88 87       	std	Y+8, r24	; 0x08
     98a:	99 87       	std	Y+9, r25	; 0x09
     98c:	aa 87       	std	Y+10, r26	; 0x0a
     98e:	bb 87       	std	Y+11, r27	; 0x0b
		if (fp->filesz < fp->seekpos) {
     990:	4c 81       	ldd	r20, Y+4	; 0x04
     992:	5d 81       	ldd	r21, Y+5	; 0x05
     994:	6e 81       	ldd	r22, Y+6	; 0x06
     996:	7f 81       	ldd	r23, Y+7	; 0x07
     998:	48 17       	cp	r20, r24
     99a:	59 07       	cpc	r21, r25
     99c:	6a 07       	cpc	r22, r26
     99e:	7b 07       	cpc	r23, r27
     9a0:	24 f4       	brge	.+8      	; 0x9aa <__stack+0xab>
			fp->filesz = fp->seekpos;
     9a2:	8c 83       	std	Y+4, r24	; 0x04
     9a4:	9d 83       	std	Y+5, r25	; 0x05
     9a6:	ae 83       	std	Y+6, r26	; 0x06
     9a8:	bf 83       	std	Y+7, r27	; 0x07
	}
	
	printf("L3write()=%d\n", wd);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L3write=");i2c_lcd_prHexInt((int)fp);i2c_lcd_prHexInt(wd);
	return(wd);
}
     9aa:	c4 01       	movw	r24, r8
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	bf 90       	pop	r11
     9be:	af 90       	pop	r10
     9c0:	9f 90       	pop	r9
     9c2:	8f 90       	pop	r8
     9c4:	7f 90       	pop	r7
     9c6:	6f 90       	pop	r6
     9c8:	5f 90       	pop	r5
     9ca:	4f 90       	pop	r4
     9cc:	3f 90       	pop	r3
     9ce:	2f 90       	pop	r2
     9d0:	08 95       	ret
			if (s < 0) {
				break;
			}
			
			// Read target sect
			if (bufsz < SD_L3_BytePerSec) {
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	a8 16       	cp	r10, r24
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	b8 06       	cpc	r11, r24
     9da:	0c f0       	brlt	.+2      	; 0x9de <__stack+0xdf>
     9dc:	97 cf       	rjmp	.-210    	; 0x90c <__stack+0xd>
     9de:	8e cf       	rjmp	.-228    	; 0x8fc <sd_L3_write+0x98>

000009e0 <sd_L3_open>:
}

//
// open or create a file for reading or writing
//
struct sd_L3_fd *sd_L3_open(struct sd_L3_vol *vp, char *fname, unsigned char oflag, unsigned char mode) {	// File discriptor  -1:error
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	2d 97       	sbiw	r28, 0x0d	; 13
     9fa:	0f b6       	in	r0, 0x3f	; 63
     9fc:	f8 94       	cli
     9fe:	de bf       	out	0x3e, r29	; 62
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	cd bf       	out	0x3d, r28	; 61
     a04:	7c 01       	movw	r14, r24
     a06:	b4 2e       	mov	r11, r20
     a08:	c2 2e       	mov	r12, r18
		// attach new fd
		//
		fp = &sd_L3_fdtbl[SD_L3_MAXFD];
		for(fd = SD_L3_MAXFD-1; fd >= 0; --fd) {
			--fp;
			if (fp->no < 0) {
     a0a:	80 91 41 01 	lds	r24, 0x0141
     a0e:	87 fd       	sbrc	r24, 7
     a10:	0c c0       	rjmp	.+24     	; 0xa2a <sd_L3_open+0x4a>
     a12:	80 91 2d 01 	lds	r24, 0x012D
     a16:	87 fd       	sbrc	r24, 7
     a18:	0d c0       	rjmp	.+26     	; 0xa34 <sd_L3_open+0x54>
     a1a:	80 91 19 01 	lds	r24, 0x0119
     a1e:	87 ff       	sbrs	r24, 7
     a20:	1f c1       	rjmp	.+574    	; 0xc60 <sd_L3_open+0x280>

		//
		// attach new fd
		//
		fp = &sd_L3_fdtbl[SD_L3_MAXFD];
		for(fd = SD_L3_MAXFD-1; fd >= 0; --fd) {
     a22:	aa 24       	eor	r10, r10
			--fp;
     a24:	09 e1       	ldi	r16, 0x19	; 25
     a26:	11 e0       	ldi	r17, 0x01	; 1
     a28:	09 c0       	rjmp	.+18     	; 0xa3c <sd_L3_open+0x5c>

		//
		// attach new fd
		//
		fp = &sd_L3_fdtbl[SD_L3_MAXFD];
		for(fd = SD_L3_MAXFD-1; fd >= 0; --fd) {
     a2a:	32 e0       	ldi	r19, 0x02	; 2
     a2c:	a3 2e       	mov	r10, r19
			--fp;
     a2e:	01 e4       	ldi	r16, 0x41	; 65
     a30:	11 e0       	ldi	r17, 0x01	; 1
     a32:	04 c0       	rjmp	.+8      	; 0xa3c <sd_L3_open+0x5c>

		//
		// attach new fd
		//
		fp = &sd_L3_fdtbl[SD_L3_MAXFD];
		for(fd = SD_L3_MAXFD-1; fd >= 0; --fd) {
     a34:	aa 24       	eor	r10, r10
     a36:	a3 94       	inc	r10
			--fp;
     a38:	0d e2       	ldi	r16, 0x2D	; 45
     a3a:	11 e0       	ldi	r17, 0x01	; 1
		}
		if (fd < 0) {
			sd_errno = SD_EMFILE;
			break;
		}
		fp->vp      = vp;
     a3c:	f8 01       	movw	r30, r16
     a3e:	f1 8a       	std	Z+17, r15	; 0x11
     a40:	e0 8a       	std	Z+16, r14	; 0x10
		fp->pp      = vp->pp;
     a42:	f7 01       	movw	r30, r14
     a44:	86 a1       	lds	r24, 0x46
     a46:	97 a1       	lds	r25, 0x47
     a48:	f8 01       	movw	r30, r16
     a4a:	93 8b       	std	Z+19, r25	; 0x13
     a4c:	82 8b       	std	Z+18, r24	; 0x12
		fp->seekpos = 0;
     a4e:	10 86       	std	Z+8, r1	; 0x08
     a50:	11 86       	std	Z+9, r1	; 0x09
     a52:	12 86       	std	Z+10, r1	; 0x0a
     a54:	13 86       	std	Z+11, r1	; 0x0b
		fp->wflg    = 0;
     a56:	11 82       	std	Z+1, r1	; 0x01

		//
		// Root directory file open
		//
		if ((fname[0] == '/') && (fname[1] == '\0')) {
     a58:	fb 01       	movw	r30, r22
     a5a:	80 81       	ld	r24, Z
     a5c:	8f 32       	cpi	r24, 0x2F	; 47
     a5e:	f9 f4       	brne	.+62     	; 0xa9e <sd_L3_open+0xbe>
     a60:	81 81       	ldd	r24, Z+1	; 0x01
     a62:	88 23       	and	r24, r24
     a64:	e1 f4       	brne	.+56     	; 0xa9e <sd_L3_open+0xbe>
			fp->firstcl = SD_L3_ROOTDIRCL;
     a66:	8d ef       	ldi	r24, 0xFD	; 253
     a68:	9f ef       	ldi	r25, 0xFF	; 255
     a6a:	f8 01       	movw	r30, r16
     a6c:	93 83       	std	Z+3, r25	; 0x03
     a6e:	82 83       	std	Z+2, r24	; 0x02
			fp->filesz  = vp->RootEntCnt << SD_L3_RootEntSzPow;
     a70:	f7 01       	movw	r30, r14
     a72:	83 89       	ldd	r24, Z+19	; 0x13
     a74:	94 89       	ldd	r25, Z+20	; 0x14
     a76:	25 e0       	ldi	r18, 0x05	; 5
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	2a 95       	dec	r18
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <sd_L3_open+0x98>
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	f8 01       	movw	r30, r16
     a86:	84 83       	std	Z+4, r24	; 0x04
     a88:	95 83       	std	Z+5, r25	; 0x05
     a8a:	a6 83       	std	Z+6, r26	; 0x06
     a8c:	b7 83       	std	Z+7, r27	; 0x07
			fp->dirloc  = -1;			// Root directory is no entry
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	9f ef       	ldi	r25, 0xFF	; 255
     a92:	dc 01       	movw	r26, r24
     a94:	84 87       	std	Z+12, r24	; 0x0c
     a96:	95 87       	std	Z+13, r25	; 0x0d
     a98:	a6 87       	std	Z+14, r26	; 0x0e
     a9a:	b7 87       	std	Z+15, r27	; 0x0f
     a9c:	ca c0       	rjmp	.+404    	; 0xc32 <sd_L3_open+0x252>
			signed char	found;
			
			//
			// Format file name
			//
			sd_L3_convdirname(m, fname);
     a9e:	ce 01       	movw	r24, r28
     aa0:	02 96       	adiw	r24, 0x02	; 2
     aa2:	0e 94 b0 01 	call	0x360	; 0x360 <sd_L3_convdirname>
			m[SD_L3_DIRENT_NAMESZ] = '\0';
     aa6:	1d 86       	std	Y+13, r1	; 0x0d
			if (m[0] == ' ') {
     aa8:	8a 81       	ldd	r24, Y+2	; 0x02
     aaa:	80 32       	cpi	r24, 0x20	; 32
     aac:	11 f4       	brne	.+4      	; 0xab2 <sd_L3_open+0xd2>
				sd_errno = SD_EINVAL;
     aae:	86 e1       	ldi	r24, 0x16	; 22
     ab0:	85 c0       	rjmp	.+266    	; 0xbbc <sd_L3_open+0x1dc>
			// Directory entry
			//
			found = 0;
			{
				// Search directory entry
				if ((found = sd_L3_finddir(vp, &sd_L3_tempdirent, m, SD_L3_DIRENT_NAMESZ)) < 0) {
     ab2:	c7 01       	movw	r24, r14
     ab4:	64 ea       	ldi	r22, 0xA4	; 164
     ab6:	71 e0       	ldi	r23, 0x01	; 1
     ab8:	ae 01       	movw	r20, r28
     aba:	4e 5f       	subi	r20, 0xFE	; 254
     abc:	5f 4f       	sbci	r21, 0xFF	; 255
     abe:	2b e0       	ldi	r18, 0x0B	; 11
     ac0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <sd_L3_finddir>
     ac4:	d8 2e       	mov	r13, r24
     ac6:	87 fd       	sbrc	r24, 7
     ac8:	cf c0       	rjmp	.+414    	; 0xc68 <sd_L3_open+0x288>
					break;
				}
				
				// Create option
#ifdef SD_OPT_WRITE
				if ((!found) && (oflag & SD_O_CREAT)) {
     aca:	88 23       	and	r24, r24
     acc:	09 f0       	breq	.+2      	; 0xad0 <sd_L3_open+0xf0>
     ace:	65 c0       	rjmp	.+202    	; 0xb9a <sd_L3_open+0x1ba>
     ad0:	b3 fe       	sbrs	r11, 3
     ad2:	63 c0       	rjmp	.+198    	; 0xb9a <sd_L3_open+0x1ba>
					char f[1];
					
					// Search free entry
					f[0] = 0xe5;
     ad4:	85 ee       	ldi	r24, 0xE5	; 229
     ad6:	89 83       	std	Y+1, r24	; 0x01
					if (sd_L3_finddir(vp, &sd_L3_tempdirent, f, 1) < 0) {
     ad8:	c7 01       	movw	r24, r14
     ada:	64 ea       	ldi	r22, 0xA4	; 164
     adc:	71 e0       	ldi	r23, 0x01	; 1
     ade:	ae 01       	movw	r20, r28
     ae0:	4f 5f       	subi	r20, 0xFF	; 255
     ae2:	5f 4f       	sbci	r21, 0xFF	; 255
     ae4:	21 e0       	ldi	r18, 0x01	; 1
     ae6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <sd_L3_finddir>
     aea:	87 fd       	sbrc	r24, 7
     aec:	bd c0       	rjmp	.+378    	; 0xc68 <sd_L3_open+0x288>
						break;
					}
					found = 1;
					
					sd_memcpy(sd_L3_tempdirent.Name, m, sizeof(sd_L3_tempdirent.Name));
     aee:	e4 ea       	ldi	r30, 0xA4	; 164
     af0:	f1 e0       	ldi	r31, 0x01	; 1
     af2:	de 01       	movw	r26, r28
     af4:	12 96       	adiw	r26, 0x02	; 2
     af6:	8b e0       	ldi	r24, 0x0B	; 11
     af8:	0d 90       	ld	r0, X+
     afa:	01 92       	st	Z+, r0
     afc:	81 50       	subi	r24, 0x01	; 1
     afe:	e1 f7       	brne	.-8      	; 0xaf8 <sd_L3_open+0x118>
					sd_L3_tempdirent.Attr			= mode;
     b00:	c0 92 af 01 	sts	0x01AF, r12
					sd_L3_tempdirent.NTRes			= 0;
     b04:	10 92 b0 01 	sts	0x01B0, r1
					sd_L3_tempdirent.CrtTimeTenth	= sd_L3_NowTimeTenth;
     b08:	80 91 a2 01 	lds	r24, 0x01A2
     b0c:	80 93 b1 01 	sts	0x01B1, r24
					sd_bounconv2(sd_L3_tempdirent.CrtTime, sd_L3_NowTime);
     b10:	80 91 a0 01 	lds	r24, 0x01A0
     b14:	90 91 a1 01 	lds	r25, 0x01A1
     b18:	80 93 b2 01 	sts	0x01B2, r24
     b1c:	90 93 b3 01 	sts	0x01B3, r25
					sd_L3_tempdirent.WrtTime[0]		= sd_L3_tempdirent.CrtTime[0];
     b20:	80 93 ba 01 	sts	0x01BA, r24
					sd_L3_tempdirent.WrtTime[1]		= sd_L3_tempdirent.CrtTime[1];
     b24:	90 93 bb 01 	sts	0x01BB, r25
					sd_bounconv2(sd_L3_tempdirent.CrtDate, sd_L3_NowDate);
     b28:	80 91 7d 01 	lds	r24, 0x017D
     b2c:	90 91 7e 01 	lds	r25, 0x017E
     b30:	80 93 b4 01 	sts	0x01B4, r24
     b34:	90 93 b5 01 	sts	0x01B5, r25
					sd_L3_tempdirent.LstAccDate[0]	= sd_L3_tempdirent.CrtDate[0];
     b38:	80 93 b6 01 	sts	0x01B6, r24
					sd_L3_tempdirent.WrtDate[0]		= sd_L3_tempdirent.CrtDate[0];
     b3c:	80 93 bc 01 	sts	0x01BC, r24
					sd_L3_tempdirent.LstAccDate[1]	= sd_L3_tempdirent.CrtDate[1];
     b40:	90 93 b7 01 	sts	0x01B7, r25
					sd_L3_tempdirent.WrtDate[1]		= sd_L3_tempdirent.CrtDate[1];
     b44:	90 93 bd 01 	sts	0x01BD, r25
					sd_L3_tempdirent.FstClusLO[0]	= 0;
     b48:	10 92 be 01 	sts	0x01BE, r1
					sd_L3_tempdirent.FstClusLO[1]	= 0;
     b4c:	10 92 bf 01 	sts	0x01BF, r1
					sd_L3_tempdirent.FileSize[0]	= 0;
     b50:	10 92 c0 01 	sts	0x01C0, r1
					sd_L3_tempdirent.FileSize[1]	= 0;
     b54:	10 92 c1 01 	sts	0x01C1, r1
					sd_L3_tempdirent.FileSize[2]	= 0;
     b58:	10 92 c2 01 	sts	0x01C2, r1
					sd_L3_tempdirent.FileSize[3]	= 0;
     b5c:	10 92 c3 01 	sts	0x01C3, r1

					// Rewrite
					if (sd_L3_lseek(vp->dirfp, -(long)sizeof(sd_L3_tempdirent), SD_SEEK_CUR) < 0) {
     b60:	f7 01       	movw	r30, r14
     b62:	84 a1       	lds	r24, 0x44
     b64:	95 a1       	lds	r25, 0x45
     b66:	40 ee       	ldi	r20, 0xE0	; 224
     b68:	5f ef       	ldi	r21, 0xFF	; 255
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	7f ef       	ldi	r23, 0xFF	; 255
     b6e:	21 e0       	ldi	r18, 0x01	; 1
     b70:	0e 94 3f 03 	call	0x67e	; 0x67e <sd_L3_lseek>
     b74:	dc 01       	movw	r26, r24
     b76:	cb 01       	movw	r24, r22
     b78:	b7 fd       	sbrc	r27, 7
     b7a:	76 c0       	rjmp	.+236    	; 0xc68 <sd_L3_open+0x288>
						break;
					}
					if (sd_L3_write(vp->dirfp, (char *)&sd_L3_tempdirent, sizeof(sd_L3_tempdirent)) != sizeof(sd_L3_tempdirent)) {
     b7c:	f7 01       	movw	r30, r14
     b7e:	84 a1       	lds	r24, 0x44
     b80:	95 a1       	lds	r25, 0x45
     b82:	64 ea       	ldi	r22, 0xA4	; 164
     b84:	71 e0       	ldi	r23, 0x01	; 1
     b86:	40 e2       	ldi	r20, 0x20	; 32
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	0e 94 32 04 	call	0x864	; 0x864 <sd_L3_write>
     b8e:	80 32       	cpi	r24, 0x20	; 32
     b90:	91 05       	cpc	r25, r1
     b92:	09 f0       	breq	.+2      	; 0xb96 <sd_L3_open+0x1b6>
     b94:	69 c0       	rjmp	.+210    	; 0xc68 <sd_L3_open+0x288>
					// Search free entry
					f[0] = 0xe5;
					if (sd_L3_finddir(vp, &sd_L3_tempdirent, f, 1) < 0) {
						break;
					}
					found = 1;
     b96:	dd 24       	eor	r13, r13
     b98:	d3 94       	inc	r13
					if (sd_L3_write(vp->dirfp, (char *)&sd_L3_tempdirent, sizeof(sd_L3_tempdirent)) != sizeof(sd_L3_tempdirent)) {
						break;
					}
				}
#endif // SD_OPT_WRITE
				dl = sd_L3_lseek(vp->dirfp, 0, SD_SEEK_CUR) - sizeof(sd_L3_tempdirent);
     b9a:	f7 01       	movw	r30, r14
     b9c:	84 a1       	lds	r24, 0x44
     b9e:	95 a1       	lds	r25, 0x45
     ba0:	40 e0       	ldi	r20, 0x00	; 0
     ba2:	50 e0       	ldi	r21, 0x00	; 0
     ba4:	ba 01       	movw	r22, r20
     ba6:	21 e0       	ldi	r18, 0x01	; 1
     ba8:	0e 94 3f 03 	call	0x67e	; 0x67e <sd_L3_lseek>
				
				// Exists
				if ((found) && (oflag & SD_O_EXCL)) {
     bac:	dd 20       	and	r13, r13
     bae:	29 f0       	breq	.+10     	; 0xbba <sd_L3_open+0x1da>
     bb0:	4b 2d       	mov	r20, r11
     bb2:	b5 fe       	sbrs	r11, 5
     bb4:	06 c0       	rjmp	.+12     	; 0xbc2 <sd_L3_open+0x1e2>
					sd_errno = SD_EEXIST;
     bb6:	81 e1       	ldi	r24, 0x11	; 17
     bb8:	01 c0       	rjmp	.+2      	; 0xbbc <sd_L3_open+0x1dc>
					break;
				}
				if (!found) {
					sd_errno = SD_ENOENT;
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	80 93 a3 01 	sts	0x01A3, r24
					break;
     bc0:	53 c0       	rjmp	.+166    	; 0xc68 <sd_L3_open+0x288>
			//
			// Init fd table
			//
			
			// setup fd table
			fp->firstcl = sd_boconv2(sd_L3_tempdirent.FstClusLO);
     bc2:	20 91 be 01 	lds	r18, 0x01BE
     bc6:	30 91 bf 01 	lds	r19, 0x01BF
     bca:	f8 01       	movw	r30, r16
     bcc:	33 83       	std	Z+3, r19	; 0x03
     bce:	22 83       	std	Z+2, r18	; 0x02
			fp->filesz  = sd_boconv4(sd_L3_tempdirent.FileSize);
     bd0:	c0 90 c0 01 	lds	r12, 0x01C0
     bd4:	d0 90 c1 01 	lds	r13, 0x01C1
     bd8:	e0 90 c2 01 	lds	r14, 0x01C2
     bdc:	f0 90 c3 01 	lds	r15, 0x01C3
     be0:	c4 82       	std	Z+4, r12	; 0x04
     be2:	d5 82       	std	Z+5, r13	; 0x05
     be4:	e6 82       	std	Z+6, r14	; 0x06
     be6:	f7 82       	std	Z+7, r15	; 0x07
					if (sd_L3_write(vp->dirfp, (char *)&sd_L3_tempdirent, sizeof(sd_L3_tempdirent)) != sizeof(sd_L3_tempdirent)) {
						break;
					}
				}
#endif // SD_OPT_WRITE
				dl = sd_L3_lseek(vp->dirfp, 0, SD_SEEK_CUR) - sizeof(sd_L3_tempdirent);
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	80 97       	sbiw	r24, 0x20	; 32
     bee:	a1 09       	sbc	r26, r1
     bf0:	b1 09       	sbc	r27, r1
			//
			
			// setup fd table
			fp->firstcl = sd_boconv2(sd_L3_tempdirent.FstClusLO);
			fp->filesz  = sd_boconv4(sd_L3_tempdirent.FileSize);
			fp->dirloc  = dl;
     bf2:	84 87       	std	Z+12, r24	; 0x0c
     bf4:	95 87       	std	Z+13, r25	; 0x0d
     bf6:	a6 87       	std	Z+14, r26	; 0x0e
     bf8:	b7 87       	std	Z+15, r27	; 0x0f
			
			// check file attribute
			if ((sd_L3_tempdirent.Attr & 0x01) || (oflag == SD_O_RDONLY)) {
     bfa:	80 91 af 01 	lds	r24, 0x01AF
     bfe:	80 fd       	sbrc	r24, 0
     c00:	02 c0       	rjmp	.+4      	; 0xc06 <sd_L3_open+0x226>
     c02:	bb 20       	and	r11, r11
     c04:	21 f4       	brne	.+8      	; 0xc0e <sd_L3_open+0x22e>
				fp->wflg |= SD_L3_WFLG_RO;
     c06:	f8 01       	movw	r30, r16
     c08:	81 81       	ldd	r24, Z+1	; 0x01
     c0a:	81 60       	ori	r24, 0x01	; 1
     c0c:	81 83       	std	Z+1, r24	; 0x01
			}
			
			// truncate
			if (oflag & SD_O_TRUNC) {
     c0e:	44 ff       	sbrs	r20, 4
     c10:	05 c0       	rjmp	.+10     	; 0xc1c <sd_L3_open+0x23c>
				fp->filesz = 0;
     c12:	f8 01       	movw	r30, r16
     c14:	14 82       	std	Z+4, r1	; 0x04
     c16:	15 82       	std	Z+5, r1	; 0x05
     c18:	16 82       	std	Z+6, r1	; 0x06
     c1a:	17 82       	std	Z+7, r1	; 0x07
			}
			
			// append
			if (oflag & SD_O_APPEND) {
     c1c:	42 ff       	sbrs	r20, 2
     c1e:	09 c0       	rjmp	.+18     	; 0xc32 <sd_L3_open+0x252>
				fp->seekpos = fp->filesz;
     c20:	f8 01       	movw	r30, r16
     c22:	84 81       	ldd	r24, Z+4	; 0x04
     c24:	95 81       	ldd	r25, Z+5	; 0x05
     c26:	a6 81       	ldd	r26, Z+6	; 0x06
     c28:	b7 81       	ldd	r27, Z+7	; 0x07
     c2a:	80 87       	std	Z+8, r24	; 0x08
     c2c:	91 87       	std	Z+9, r25	; 0x09
     c2e:	a2 87       	std	Z+10, r26	; 0x0a
     c30:	b3 87       	std	Z+11, r27	; 0x0b
		printf("fd[%d].pp=0x%08lx\n", fd, (long)fp->pp);
		
		//
		// commit
		//
		fp->no = fd;
     c32:	f8 01       	movw	r30, r16
     c34:	a0 82       	st	Z, r10
		break;
     c36:	18 c0       	rjmp	.+48     	; 0xc68 <sd_L3_open+0x288>
	}

	if ((fd < 0) || (fp->no < 0)) {
		fp = 0;
     c38:	00 e0       	ldi	r16, 0x00	; 0
     c3a:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	printf("L3open()=0x%08lx errno=%d\n", (long)fp, sd_errno);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L3open=");i2c_lcd_prHexInt((int)fp);i2c_lcd_prHexByte(sd_errno);
	return(fp);
}
     c3c:	c8 01       	movw	r24, r16
     c3e:	2d 96       	adiw	r28, 0x0d	; 13
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	de bf       	out	0x3e, r29	; 62
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	cd bf       	out	0x3d, r28	; 61
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	08 95       	ret
			if (fp->no < 0) {
				break;
			}
		}
		if (fd < 0) {
			sd_errno = SD_EMFILE;
     c60:	88 e1       	ldi	r24, 0x18	; 24
     c62:	80 93 a3 01 	sts	0x01A3, r24
     c66:	e8 cf       	rjmp	.-48     	; 0xc38 <sd_L3_open+0x258>
		//
		fp->no = fd;
		break;
	}

	if ((fd < 0) || (fp->no < 0)) {
     c68:	f8 01       	movw	r30, r16
     c6a:	80 81       	ld	r24, Z
     c6c:	87 ff       	sbrs	r24, 7
     c6e:	e6 cf       	rjmp	.-52     	; 0xc3c <sd_L3_open+0x25c>
     c70:	e3 cf       	rjmp	.-58     	; 0xc38 <sd_L3_open+0x258>

00000c72 <sd_L3_close>:
#endif //SD_OPT_WRITE

//
// delete a descriptor
//
signed char sd_L3_close(struct sd_L3_fd *fp) {
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	ec 01       	movw	r28, r24
			break;
		}
#endif //SD_OPT_ARGCHECK

#ifdef SD_OPT_WRITE
		if (sd_L3_sync(fp) != 0) {
     c78:	0e 94 b3 03 	call	0x766	; 0x766 <sd_L3_sync>
     c7c:	88 23       	and	r24, r24
     c7e:	21 f4       	brne	.+8      	; 0xc88 <sd_L3_close+0x16>
#endif //SD_OPT_FORCECLOSE
		}
#endif //SD_OPT_WRITE

		// fd free
		fp->no = -1;
     c80:	8f ef       	ldi	r24, 0xFF	; 255
     c82:	88 83       	st	Y, r24

		rc = 0;
     c84:	80 e0       	ldi	r24, 0x00	; 0
		break;
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <sd_L3_close+0x18>
signed char sd_L3_close(struct sd_L3_fd *fp) {
										// -1:error 0:normal
	signed char	rc;						// return code

	printf("L3close(fp=0x%08lx) start\n", (long)fp);
	rc = -1;
     c88:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	printf("L3close()=%d\n", rc);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L3close=");i2c_lcd_prHexInt((int)fp);i2c_lcd_prHexByte(rc);
	return(rc);
}
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	08 95       	ret

00000c90 <sd_L3_unlink>:

//
// remove directory entry
//
#ifdef SD_OPT_UNLINK
signed char sd_L3_unlink(struct sd_L3_vol *vp, char *fname){
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	2c 97       	sbiw	r28, 0x0c	; 12
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	de bf       	out	0x3e, r29	; 62
     ca8:	0f be       	out	0x3f, r0	; 63
     caa:	cd bf       	out	0x3d, r28	; 61
     cac:	8c 01       	movw	r16, r24
			break;
		}
#endif //SD_OPT_ARGCHECK

		// Format name
		sd_L3_convdirname(m, fname);
     cae:	ce 01       	movw	r24, r28
     cb0:	01 96       	adiw	r24, 0x01	; 1
     cb2:	0e 94 b0 01 	call	0x360	; 0x360 <sd_L3_convdirname>
		m[SD_L3_DIRENT_NAMESZ] = '\0';
     cb6:	1c 86       	std	Y+12, r1	; 0x0c

		// Erase flag on
		if (sd_L3_finddir(vp, &sd_L3_tempdirent, m, SD_L3_DIRENT_NAMESZ) <= 0) {
     cb8:	c8 01       	movw	r24, r16
     cba:	64 ea       	ldi	r22, 0xA4	; 164
     cbc:	71 e0       	ldi	r23, 0x01	; 1
     cbe:	ae 01       	movw	r20, r28
     cc0:	4f 5f       	subi	r20, 0xFF	; 255
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	2b e0       	ldi	r18, 0x0B	; 11
     cc6:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <sd_L3_finddir>
     cca:	18 16       	cp	r1, r24
     ccc:	3c f5       	brge	.+78     	; 0xd1c <sd_L3_unlink+0x8c>
			break;
		}
		cl = sd_boconv2(sd_L3_tempdirent.FstClusLO);
     cce:	e0 90 be 01 	lds	r14, 0x01BE
     cd2:	f0 90 bf 01 	lds	r15, 0x01BF
		sd_L3_tempdirent.Name[0] = 0xe5;
     cd6:	85 ee       	ldi	r24, 0xE5	; 229
     cd8:	80 93 a4 01 	sts	0x01A4, r24
		if (sd_L3_lseek(vp->dirfp, -(long)sizeof(sd_L3_tempdirent), SD_SEEK_CUR) < 0) {
     cdc:	f8 01       	movw	r30, r16
     cde:	84 a1       	lds	r24, 0x44
     ce0:	95 a1       	lds	r25, 0x45
     ce2:	40 ee       	ldi	r20, 0xE0	; 224
     ce4:	5f ef       	ldi	r21, 0xFF	; 255
     ce6:	6f ef       	ldi	r22, 0xFF	; 255
     ce8:	7f ef       	ldi	r23, 0xFF	; 255
     cea:	21 e0       	ldi	r18, 0x01	; 1
     cec:	0e 94 3f 03 	call	0x67e	; 0x67e <sd_L3_lseek>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	b7 fd       	sbrc	r27, 7
     cf6:	12 c0       	rjmp	.+36     	; 0xd1c <sd_L3_unlink+0x8c>
			break;
		}
		if (sd_L3_write(vp->dirfp, (char *)&sd_L3_tempdirent, sizeof(sd_L3_tempdirent)) < 0) {
     cf8:	f8 01       	movw	r30, r16
     cfa:	84 a1       	lds	r24, 0x44
     cfc:	95 a1       	lds	r25, 0x45
     cfe:	64 ea       	ldi	r22, 0xA4	; 164
     d00:	71 e0       	ldi	r23, 0x01	; 1
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	0e 94 32 04 	call	0x864	; 0x864 <sd_L3_write>
     d0a:	97 fd       	sbrc	r25, 7
     d0c:	07 c0       	rjmp	.+14     	; 0xd1c <sd_L3_unlink+0x8c>
			break;
		}

		// Free cluster chain
		if (sd_L3_freecl(vp, cl) < 0) {
     d0e:	c8 01       	movw	r24, r16
     d10:	b7 01       	movw	r22, r14
     d12:	0e 94 7f 01 	call	0x2fe	; 0x2fe <sd_L3_freecl>
#ifdef SD_OPT_UNLINK
signed char sd_L3_unlink(struct sd_L3_vol *vp, char *fname){
	signed char rc;
		
	printf("L3unlink(vp=0x%08lx,fname=%s) start\n", (long)vp, fname);
	rc = -1;
     d16:	88 0f       	add	r24, r24
     d18:	88 0b       	sbc	r24, r24
     d1a:	01 c0       	rjmp	.+2      	; 0xd1e <sd_L3_unlink+0x8e>
     d1c:	8f ef       	ldi	r24, 0xFF	; 255
	}
			
	printf("L3unlink()=%d\n", rc);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L3unlink=");i2c_lcd_prHexInt((int)vp);i2c_lcd_prHexByte(rc);
	return(rc);
}
     d1e:	2c 96       	adiw	r28, 0x0c	; 12
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	1f 91       	pop	r17
     d30:	0f 91       	pop	r16
     d32:	ff 90       	pop	r15
     d34:	ef 90       	pop	r14
     d36:	08 95       	ret

00000d38 <sd_L3_mount>:
#endif //SD_OPT_UNLINK

//
// mount a filesystem
//
struct sd_L3_vol *sd_L3_mount(char partno) {
     d38:	8f 92       	push	r8
     d3a:	9f 92       	push	r9
     d3c:	af 92       	push	r10
     d3e:	bf 92       	push	r11
     d40:	cf 92       	push	r12
     d42:	df 92       	push	r13
     d44:	ef 92       	push	r14
     d46:	ff 92       	push	r15
     d48:	0f 93       	push	r16
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	00 d0       	rcall	.+0      	; 0xd52 <sd_L3_mount+0x1a>
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
		unsigned short	FATSectors;
		unsigned short	RootDirSectors;
		long			DataSectors;
		
		unsigned char	n;
		char			rootdirname[] = "/";
     d56:	2f e2       	ldi	r18, 0x2F	; 47
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	3a 83       	std	Y+2, r19	; 0x02
     d5c:	29 83       	std	Y+1, r18	; 0x01
		//
		// attach new vd
		//
		vp = &sd_L3_vol[0];
		for(vd = 0; vd < SD_L3_MAXVD; vd++) {
			if (vp->no < 0) {
     d5e:	90 91 55 01 	lds	r25, 0x0155
     d62:	97 ff       	sbrs	r25, 7
     d64:	71 c1       	rjmp	.+738    	; 0x1048 <sd_L3_mount+0x310>
		}
		if (vd >= SD_L3_MAXVD) {
			sd_errno = SD_EMFILE;
			break;
		}
		vp->cl_1st = SD_L3_BADCL;		// cluster manage
     d66:	27 ef       	ldi	r18, 0xF7	; 247
     d68:	3f ef       	ldi	r19, 0xFF	; 255
     d6a:	30 93 74 01 	sts	0x0174, r19
     d6e:	20 93 73 01 	sts	0x0173, r18
		vp->cl_n   = 0xffff;			//
     d72:	2f ef       	ldi	r18, 0xFF	; 255
     d74:	3f ef       	ldi	r19, 0xFF	; 255
     d76:	30 93 76 01 	sts	0x0176, r19
     d7a:	20 93 75 01 	sts	0x0175, r18
		vp->cl_cl  = 0;					//
     d7e:	10 92 78 01 	sts	0x0178, r1
     d82:	10 92 77 01 	sts	0x0177, r1

		// device open
		if ((pp = sd_L2_open(partno)) == 0) {
     d86:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <sd_L2_open>
     d8a:	4c 01       	movw	r8, r24
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	09 f4       	brne	.+2      	; 0xd92 <sd_L3_mount+0x5a>
     d90:	35 c1       	rjmp	.+618    	; 0xffc <sd_L3_mount+0x2c4>
			break;
		}
		vp->pp = pp;
     d92:	90 93 7c 01 	sts	0x017C, r25
     d96:	80 93 7b 01 	sts	0x017B, r24

		// Check target partition
		if ((pp->parttype != SD_L3_PARTID_1) &&
     d9a:	fc 01       	movw	r30, r24
     d9c:	83 81       	ldd	r24, Z+3	; 0x03
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	61 f0       	breq	.+24     	; 0xdba <sd_L3_mount+0x82>
     da2:	84 30       	cpi	r24, 0x04	; 4
     da4:	51 f0       	breq	.+20     	; 0xdba <sd_L3_mount+0x82>
			(pp->parttype != SD_L3_PARTID_2) &&
     da6:	86 30       	cpi	r24, 0x06	; 6
     da8:	41 f0       	breq	.+16     	; 0xdba <sd_L3_mount+0x82>
			(pp->parttype != SD_L3_PARTID_3) &&
     daa:	8b 30       	cpi	r24, 0x0B	; 11
     dac:	31 f0       	breq	.+12     	; 0xdba <sd_L3_mount+0x82>
			(pp->parttype != SD_L3_PARTID_4) &&
     dae:	8e 30       	cpi	r24, 0x0E	; 14
     db0:	21 f0       	breq	.+8      	; 0xdba <sd_L3_mount+0x82>
			(pp->parttype != SD_L3_PARTID_5) &&
     db2:	8f 3f       	cpi	r24, 0xFF	; 255
     db4:	11 f0       	breq	.+4      	; 0xdba <sd_L3_mount+0x82>
			(pp->parttype != SD_L3_PARTID_6)) {
			sd_errno = SD_ENOTBLK;
     db6:	8f e0       	ldi	r24, 0x0F	; 15
     db8:	0d c1       	rjmp	.+538    	; 0xfd4 <sd_L3_mount+0x29c>
			break;
		}
		
		// get boot sector (reserved region)
		if (sd_L2_read(pp, 0) != 0) {
     dba:	c4 01       	movw	r24, r8
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	50 e0       	ldi	r21, 0x00	; 0
     dc0:	ba 01       	movw	r22, r20
     dc2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <sd_L2_read>
     dc6:	88 23       	and	r24, r24
     dc8:	09 f0       	breq	.+2      	; 0xdcc <sd_L3_mount+0x94>
     dca:	18 c1       	rjmp	.+560    	; 0xffc <sd_L3_mount+0x2c4>
		bpb2 = (struct bpb2 *)sd_buf2;
#else
		bpb1 = (struct bpb1 *)&(sd_buf[0]);
		bpb2 = (struct bpb2 *)&(sd_buf[256]);
#endif
		if ((bpb2->sig[0] != 0x55) ||
     dcc:	80 91 c4 03 	lds	r24, 0x03C4
     dd0:	85 35       	cpi	r24, 0x55	; 85
     dd2:	21 f4       	brne	.+8      	; 0xddc <sd_L3_mount+0xa4>
     dd4:	80 91 c5 03 	lds	r24, 0x03C5
     dd8:	8a 3a       	cpi	r24, 0xAA	; 170
     dda:	11 f0       	breq	.+4      	; 0xde0 <sd_L3_mount+0xa8>
			(bpb2->sig[1] != 0xaa)) {
			sd_errno = SD_ENXIO;
     ddc:	86 e0       	ldi	r24, 0x06	; 6
     dde:	fa c0       	rjmp	.+500    	; 0xfd4 <sd_L3_mount+0x29c>
			break;
		}
		
		// set value
		BytePerSec			= sd_boconv2(bpb1->BPB_BytePerSec);
     de0:	80 91 d1 01 	lds	r24, 0x01D1
     de4:	90 91 d2 01 	lds	r25, 0x01D2
		vp->SecPerClus		= bpb1->BPB_SecPerClus;
     de8:	20 91 d3 01 	lds	r18, 0x01D3
     dec:	20 93 6a 01 	sts	0x016A, r18
     df0:	10 92 6b 01 	sts	0x016B, r1
		RsvdSectors			= sd_boconv2(bpb1->BPB_RsvdSecCnt);
     df4:	a0 90 d4 01 	lds	r10, 0x01D4
     df8:	b0 90 d5 01 	lds	r11, 0x01D5
		vp->NumFATs			= bpb1->BPB_NumFATs;
     dfc:	20 91 d6 01 	lds	r18, 0x01D6
     e00:	20 93 66 01 	sts	0x0166, r18
		vp->RootEntCnt		= sd_boconv2(bpb1->BPB_RootEntCnt);
     e04:	20 91 d7 01 	lds	r18, 0x01D7
     e08:	30 91 d8 01 	lds	r19, 0x01D8
     e0c:	30 93 69 01 	sts	0x0169, r19
     e10:	20 93 68 01 	sts	0x0168, r18
		TotSec				= sd_boconv2(bpb1->BPB_TotSec16);
     e14:	c0 90 d9 01 	lds	r12, 0x01D9
     e18:	d0 90 da 01 	lds	r13, 0x01DA
     e1c:	ee 24       	eor	r14, r14
     e1e:	ff 24       	eor	r15, r15
		if (TotSec == 0) {
     e20:	c1 14       	cp	r12, r1
     e22:	d1 04       	cpc	r13, r1
     e24:	e1 04       	cpc	r14, r1
     e26:	f1 04       	cpc	r15, r1
     e28:	41 f4       	brne	.+16     	; 0xe3a <sd_L3_mount+0x102>
			TotSec			= sd_boconv4(bpb1->BPB_TotSec32);
     e2a:	c0 90 e6 01 	lds	r12, 0x01E6
     e2e:	d0 90 e7 01 	lds	r13, 0x01E7
     e32:	e0 90 e8 01 	lds	r14, 0x01E8
     e36:	f0 90 e9 01 	lds	r15, 0x01E9
		}
		vp->FATSz			= sd_boconv2(bpb1->BPB_FATSz16);
     e3a:	20 91 dc 01 	lds	r18, 0x01DC
     e3e:	30 91 dd 01 	lds	r19, 0x01DD
     e42:	30 93 65 01 	sts	0x0165, r19
     e46:	20 93 64 01 	sts	0x0164, r18
		
		// convert 512byte sector
		n = sd_log2(BytePerSec) - SD_L3_BytePerSecPow;
     e4a:	0e 94 45 08 	call	0x108a	; 0x108a <sd_log2>
     e4e:	08 2f       	mov	r16, r24
     e50:	09 50       	subi	r16, 0x09	; 9
		vp->FATSz			= vp->FATSz << n;
     e52:	20 91 64 01 	lds	r18, 0x0164
     e56:	30 91 65 01 	lds	r19, 0x0165
     e5a:	00 2e       	mov	r0, r16
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <sd_L3_mount+0x12a>
     e5e:	22 0f       	add	r18, r18
     e60:	33 1f       	adc	r19, r19
     e62:	0a 94       	dec	r0
     e64:	e2 f7       	brpl	.-8      	; 0xe5e <sd_L3_mount+0x126>
     e66:	30 93 65 01 	sts	0x0165, r19
     e6a:	20 93 64 01 	sts	0x0164, r18
		vp->SecPerClus		= vp->SecPerClus << n;
     e6e:	e0 91 6a 01 	lds	r30, 0x016A
     e72:	f0 91 6b 01 	lds	r31, 0x016B
     e76:	00 2e       	mov	r0, r16
     e78:	02 c0       	rjmp	.+4      	; 0xe7e <sd_L3_mount+0x146>
     e7a:	ee 0f       	add	r30, r30
     e7c:	ff 1f       	adc	r31, r31
     e7e:	0a 94       	dec	r0
     e80:	e2 f7       	brpl	.-8      	; 0xe7a <sd_L3_mount+0x142>
     e82:	f0 93 6b 01 	sts	0x016B, r31
     e86:	e0 93 6a 01 	sts	0x016A, r30
		RsvdSectors			= RsvdSectors << n;
     e8a:	d5 01       	movw	r26, r10
     e8c:	00 2e       	mov	r0, r16
     e8e:	02 c0       	rjmp	.+4      	; 0xe94 <sd_L3_mount+0x15c>
     e90:	aa 0f       	add	r26, r26
     e92:	bb 1f       	adc	r27, r27
     e94:	0a 94       	dec	r0
     e96:	e2 f7       	brpl	.-8      	; 0xe90 <sd_L3_mount+0x158>
		TotSec				= TotSec << n;
		
		// calcurate region size and top location
		FATSectors			= (vp->NumFATs * vp->FATSz);
     e98:	80 91 66 01 	lds	r24, 0x0166
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	28 9f       	mul	r18, r24
     ea0:	50 01       	movw	r10, r0
     ea2:	29 9f       	mul	r18, r25
     ea4:	b0 0c       	add	r11, r0
     ea6:	38 9f       	mul	r19, r24
     ea8:	b0 0c       	add	r11, r0
     eaa:	11 24       	eor	r1, r1
//		RootDirSectors		= ((vp->RootEntCnt * SD_L3_RootEntSz) + (SD_L3_BytePerSec - 1)) / SD_L3_BytePerSec;
		RootDirSectors		= ((vp->RootEntCnt * SD_L3_RootEntSz) + (SD_L3_BytePerSec - 1)) >> SD_L3_BytePerSecPow;
		DataSectors			= TotSec - (RsvdSectors + FATSectors + RootDirSectors);
     eac:	aa 0e       	add	r10, r26
     eae:	bb 1e       	adc	r11, r27
		TotSec				= TotSec << n;
		
		// calcurate region size and top location
		FATSectors			= (vp->NumFATs * vp->FATSz);
//		RootDirSectors		= ((vp->RootEntCnt * SD_L3_RootEntSz) + (SD_L3_BytePerSec - 1)) / SD_L3_BytePerSec;
		RootDirSectors		= ((vp->RootEntCnt * SD_L3_RootEntSz) + (SD_L3_BytePerSec - 1)) >> SD_L3_BytePerSecPow;
     eb0:	40 91 68 01 	lds	r20, 0x0168
     eb4:	50 91 69 01 	lds	r21, 0x0169
     eb8:	65 e0       	ldi	r22, 0x05	; 5
     eba:	44 0f       	add	r20, r20
     ebc:	55 1f       	adc	r21, r21
     ebe:	6a 95       	dec	r22
     ec0:	e1 f7       	brne	.-8      	; 0xeba <sd_L3_mount+0x182>
     ec2:	41 50       	subi	r20, 0x01	; 1
     ec4:	5e 4f       	sbci	r21, 0xFE	; 254
     ec6:	45 2f       	mov	r20, r21
     ec8:	55 27       	eor	r21, r21
     eca:	46 95       	lsr	r20
		DataSectors			= TotSec - (RsvdSectors + FATSectors + RootDirSectors);
     ecc:	4a 0d       	add	r20, r10
     ece:	5b 1d       	adc	r21, r11
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
		// convert 512byte sector
		n = sd_log2(BytePerSec) - SD_L3_BytePerSecPow;
		vp->FATSz			= vp->FATSz << n;
		vp->SecPerClus		= vp->SecPerClus << n;
		RsvdSectors			= RsvdSectors << n;
		TotSec				= TotSec << n;
     ed4:	00 2e       	mov	r0, r16
     ed6:	04 c0       	rjmp	.+8      	; 0xee0 <sd_L3_mount+0x1a8>
     ed8:	cc 0c       	add	r12, r12
     eda:	dd 1c       	adc	r13, r13
     edc:	ee 1c       	adc	r14, r14
     ede:	ff 1c       	adc	r15, r15
     ee0:	0a 94       	dec	r0
     ee2:	d2 f7       	brpl	.-12     	; 0xed8 <sd_L3_mount+0x1a0>
		
		// calcurate region size and top location
		FATSectors			= (vp->NumFATs * vp->FATSz);
//		RootDirSectors		= ((vp->RootEntCnt * SD_L3_RootEntSz) + (SD_L3_BytePerSec - 1)) / SD_L3_BytePerSec;
		RootDirSectors		= ((vp->RootEntCnt * SD_L3_RootEntSz) + (SD_L3_BytePerSec - 1)) >> SD_L3_BytePerSecPow;
		DataSectors			= TotSec - (RsvdSectors + FATSectors + RootDirSectors);
     ee4:	c4 1a       	sub	r12, r20
     ee6:	d5 0a       	sbc	r13, r21
     ee8:	e6 0a       	sbc	r14, r22
     eea:	f7 0a       	sbc	r15, r23
		
		vp->FirstFATSector	= RsvdSectors;
     eec:	cd 01       	movw	r24, r26
     eee:	a0 e0       	ldi	r26, 0x00	; 0
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	80 93 56 01 	sts	0x0156, r24
     ef6:	90 93 57 01 	sts	0x0157, r25
     efa:	a0 93 58 01 	sts	0x0158, r26
     efe:	b0 93 59 01 	sts	0x0159, r27
		vp->RootDirSector	= RsvdSectors + FATSectors;
     f02:	c5 01       	movw	r24, r10
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	80 93 5a 01 	sts	0x015A, r24
     f0c:	90 93 5b 01 	sts	0x015B, r25
     f10:	a0 93 5c 01 	sts	0x015C, r26
     f14:	b0 93 5d 01 	sts	0x015D, r27
		vp->FirstDataSector	= RsvdSectors + FATSectors + RootDirSectors;
     f18:	40 93 5e 01 	sts	0x015E, r20
     f1c:	50 93 5f 01 	sts	0x015F, r21
     f20:	60 93 60 01 	sts	0x0160, r22
     f24:	70 93 61 01 	sts	0x0161, r23
		
// calcurate other parameter
		vp->SecPerClusPow	= sd_log2(vp->SecPerClus);
     f28:	cf 01       	movw	r24, r30
     f2a:	0e 94 45 08 	call	0x108a	; 0x108a <sd_log2>
     f2e:	80 93 6c 01 	sts	0x016C, r24
		vp->SecPerClusMask	= ~(0xffff << vp->SecPerClusPow);
     f32:	2f ef       	ldi	r18, 0xFF	; 255
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	08 2e       	mov	r0, r24
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <sd_L3_mount+0x206>
     f3a:	22 0f       	add	r18, r18
     f3c:	33 1f       	adc	r19, r19
     f3e:	0a 94       	dec	r0
     f40:	e2 f7       	brpl	.-8      	; 0xf3a <sd_L3_mount+0x202>
     f42:	20 95       	com	r18
     f44:	20 93 6d 01 	sts	0x016D, r18
//		vp->BytePerClus		= (int)vp->SecPerClus * SD_L3_BytePerSec;
		vp->BytePerClus		= (int)vp->SecPerClus << SD_L3_BytePerSecPow;
     f48:	90 91 6a 01 	lds	r25, 0x016A
     f4c:	39 2f       	mov	r19, r25
     f4e:	33 0f       	add	r19, r19
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	a9 01       	movw	r20, r18
     f54:	66 27       	eor	r22, r22
     f56:	57 fd       	sbrc	r21, 7
     f58:	60 95       	com	r22
     f5a:	76 2f       	mov	r23, r22
     f5c:	40 93 6e 01 	sts	0x016E, r20
     f60:	50 93 6f 01 	sts	0x016F, r21
     f64:	60 93 70 01 	sts	0x0170, r22
     f68:	70 93 71 01 	sts	0x0171, r23
		vp->BytePerClusPow	= vp->SecPerClusPow + SD_L3_BytePerSecPow;
     f6c:	98 2f       	mov	r25, r24
     f6e:	97 5f       	subi	r25, 0xF7	; 247
     f70:	90 93 72 01 	sts	0x0172, r25
//		vp->FATEntCnt		= DataSectors / vp->SecPerClus;		// CountofClusters
		vp->FATEntCnt		= DataSectors >> vp->SecPerClusPow;	// CountofClusters
     f74:	04 c0       	rjmp	.+8      	; 0xf7e <sd_L3_mount+0x246>
     f76:	f5 94       	asr	r15
     f78:	e7 94       	ror	r14
     f7a:	d7 94       	ror	r13
     f7c:	c7 94       	ror	r12
     f7e:	8a 95       	dec	r24
     f80:	d2 f7       	brpl	.-12     	; 0xf76 <sd_L3_mount+0x23e>
     f82:	96 01       	movw	r18, r12
     f84:	d0 92 63 01 	sts	0x0163, r13
     f88:	c0 92 62 01 	sts	0x0162, r12
		if (vp->FATEntCnt < 4085) {
     f8c:	ff e0       	ldi	r31, 0x0F	; 15
     f8e:	25 3f       	cpi	r18, 0xF5	; 245
     f90:	3f 07       	cpc	r19, r31
     f92:	10 f4       	brcc	.+4      	; 0xf98 <sd_L3_mount+0x260>
			vp->FATType = SD_L3_FAT12;
     f94:	8c e0       	ldi	r24, 0x0C	; 12
     f96:	07 c0       	rjmp	.+14     	; 0xfa6 <sd_L3_mount+0x26e>
		} else if(vp->FATEntCnt < 65525) {
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	25 3f       	cpi	r18, 0xF5	; 245
     f9c:	38 07       	cpc	r19, r24
     f9e:	10 f4       	brcc	.+4      	; 0xfa4 <sd_L3_mount+0x26c>
			vp->FATType = SD_L3_FAT16;
     fa0:	80 e1       	ldi	r24, 0x10	; 16
     fa2:	01 c0       	rjmp	.+2      	; 0xfa6 <sd_L3_mount+0x26e>
		} else {
			vp->FATType = SD_L3_FAT32;
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	80 93 67 01 	sts	0x0167, r24
		printf("vp->BytePerClus=%ld\n", vp->BytePerClus);
		printf("vp->BytePerClusPow=%d\n", vp->BytePerClusPow);
		printf("vp->FATType=%d\n", vp->FATType);
		printf("vp->pp=0x%08lx\n", (long)vp->pp);
		
		if ((vp->RootEntCnt == 0) ||	// FAT32 volume?
     faa:	80 91 68 01 	lds	r24, 0x0168
     fae:	90 91 69 01 	lds	r25, 0x0169
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	71 f0       	breq	.+28     	; 0xfd2 <sd_L3_mount+0x29a>
     fb6:	80 91 64 01 	lds	r24, 0x0164
     fba:	90 91 65 01 	lds	r25, 0x0165
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	41 f0       	breq	.+16     	; 0xfd2 <sd_L3_mount+0x29a>
			(vp->FATSz      == 0) ||
			(vp->FATType    == SD_L3_FAT32) ||
     fc2:	80 91 67 01 	lds	r24, 0x0167
		printf("vp->BytePerClusPow=%d\n", vp->BytePerClusPow);
		printf("vp->FATType=%d\n", vp->FATType);
		printf("vp->pp=0x%08lx\n", (long)vp->pp);
		
		if ((vp->RootEntCnt == 0) ||	// FAT32 volume?
			(vp->FATSz      == 0) ||
     fc6:	80 32       	cpi	r24, 0x20	; 32
     fc8:	21 f0       	breq	.+8      	; 0xfd2 <sd_L3_mount+0x29a>
			(vp->FATType    == SD_L3_FAT32) ||
     fca:	8c 30       	cpi	r24, 0x0C	; 12
     fcc:	31 f4       	brne	.+12     	; 0xfda <sd_L3_mount+0x2a2>
			((vp->FATType   == SD_L3_FAT12) && (n != 0))) {
     fce:	00 23       	and	r16, r16
     fd0:	21 f0       	breq	.+8      	; 0xfda <sd_L3_mount+0x2a2>
			sd_errno = SD_ENODEV;
     fd2:	83 e1       	ldi	r24, 0x13	; 19
     fd4:	80 93 a3 01 	sts	0x01A3, r24
     fd8:	11 c0       	rjmp	.+34     	; 0xffc <sd_L3_mount+0x2c4>
			break;
		}

		// Commit
		vp->no = vd;
     fda:	10 92 55 01 	sts	0x0155, r1

		// Open root directory file
		if ((vp->dirfp = sd_L3_open(vp, rootdirname, SD_O_RDWR, SD_ATTR_DIRECTORY)) == 0) {
     fde:	85 e5       	ldi	r24, 0x55	; 85
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	be 01       	movw	r22, r28
     fe4:	6f 5f       	subi	r22, 0xFF	; 255
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	42 e0       	ldi	r20, 0x02	; 2
     fea:	20 e1       	ldi	r18, 0x10	; 16
     fec:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <sd_L3_open>
     ff0:	90 93 7a 01 	sts	0x017A, r25
     ff4:	80 93 79 01 	sts	0x0179, r24
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	a9 f4       	brne	.+42     	; 0x1026 <sd_L3_mount+0x2ee>
		

		//
		// attach new vd
		//
		vp = &sd_L3_vol[0];
     ffc:	05 e5       	ldi	r16, 0x55	; 85
     ffe:	11 e0       	ldi	r17, 0x01	; 1
		
		break;
	}
	
	if (rc) {
		if (vp->dirfp != 0) {
    1000:	f8 01       	movw	r30, r16
    1002:	84 a1       	lds	r24, 0x44
    1004:	95 a1       	lds	r25, 0x45
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	11 f0       	breq	.+4      	; 0x100e <sd_L3_mount+0x2d6>
			sd_L3_close(vp->dirfp);
    100a:	0e 94 39 06 	call	0xc72	; 0xc72 <sd_L3_close>
		}
		if (pp != 0) {
    100e:	81 14       	cp	r8, r1
    1010:	91 04       	cpc	r9, r1
    1012:	19 f0       	breq	.+6      	; 0x101a <sd_L3_mount+0x2e2>
			sd_L2_close(pp);
    1014:	c4 01       	movw	r24, r8
    1016:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <sd_L2_close>
		}
		vp->no = -1;
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	f8 01       	movw	r30, r16
    101e:	80 83       	st	Z, r24
		vp = 0;
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 c0       	rjmp	.+4      	; 0x102a <sd_L3_mount+0x2f2>
		

		//
		// attach new vd
		//
		vp = &sd_L3_vol[0];
    1026:	85 e5       	ldi	r24, 0x55	; 85
    1028:	91 e0       	ldi	r25, 0x01	; 1
	}

	printf("L3mount()=0x%08lx\n", (long)vp);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L3mount=");i2c_lcd_prHexInt((int)vp);i2c_lcd_prHexByte(sd_errno);
	return(vp);
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	ff 90       	pop	r15
    1038:	ef 90       	pop	r14
    103a:	df 90       	pop	r13
    103c:	cf 90       	pop	r12
    103e:	bf 90       	pop	r11
    1040:	af 90       	pop	r10
    1042:	9f 90       	pop	r9
    1044:	8f 90       	pop	r8
    1046:	08 95       	ret
				break;
			}
			vp++;
		}
		if (vd >= SD_L3_MAXVD) {
			sd_errno = SD_EMFILE;
    1048:	88 e1       	ldi	r24, 0x18	; 24
    104a:	80 93 a3 01 	sts	0x01A3, r24
			break;
    104e:	0d e7       	ldi	r16, 0x7D	; 125
    1050:	11 e0       	ldi	r17, 0x01	; 1
    1052:	d6 cf       	rjmp	.-84     	; 0x1000 <sd_L3_mount+0x2c8>

00001054 <sd_L3_unmount>:
}

//
// dismount a filesystem
//
signed char sd_L3_unmount(struct sd_L3_vol *vp) {
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
			break;
		}
#endif
		
		// Close directory file
		if (vp->dirfp != 0) {
    105a:	8c a1       	lds	r24, 0x4c
    105c:	9d a1       	lds	r25, 0x4d
    105e:	00 97       	sbiw	r24, 0x00	; 0
    1060:	31 f0       	breq	.+12     	; 0x106e <sd_L3_unmount+0x1a>
			if (sd_L3_close(vp->dirfp) < 0) {
    1062:	0e 94 39 06 	call	0xc72	; 0xc72 <sd_L3_close>
    1066:	87 fd       	sbrc	r24, 7
    1068:	0c c0       	rjmp	.+24     	; 0x1082 <sd_L3_unmount+0x2e>
				break;
			}
			vp->dirfp = 0;
    106a:	1d a2       	lds	r17, 0x9d
    106c:	1c a2       	lds	r17, 0x9c
		}

		// Close device
		if (sd_L2_close(vp->pp) != 0) {
    106e:	8e a1       	lds	r24, 0x4e
    1070:	9f a1       	lds	r25, 0x4f
    1072:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <sd_L2_close>
    1076:	88 23       	and	r24, r24
    1078:	21 f4       	brne	.+8      	; 0x1082 <sd_L3_unmount+0x2e>
			break;
		}

		vp->no = -1;
    107a:	8f ef       	ldi	r24, 0xFF	; 255
    107c:	88 83       	st	Y, r24
		rc = 0;
    107e:	80 e0       	ldi	r24, 0x00	; 0
		break;
    1080:	01 c0       	rjmp	.+2      	; 0x1084 <sd_L3_unmount+0x30>
//
signed char sd_L3_unmount(struct sd_L3_vol *vp) {
	signed char rc;
	
	printf("L3unmount(0x%08lx) start\n", (long)vp);
	rc = -1;
    1082:	8f ef       	ldi	r24, 0xFF	; 255
	}
	
	printf("L3unmount()=%d\n", rc);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L3unmount=");i2c_lcd_prHexInt((int)vp);i2c_lcd_prHexByte(rc);
	return(rc);
}
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <sd_log2>:
#endif

//
//	Logarithms
//
signed char sd_log2(unsigned short x) {
    108a:	9c 01       	movw	r18, r24
	char i;
	
	for(i = 15; i >= 0; --i) {
    108c:	8f e0       	ldi	r24, 0x0F	; 15
		if (x & 0x8000) {
    108e:	37 fd       	sbrc	r19, 7
    1090:	04 c0       	rjmp	.+8      	; 0x109a <sd_log2+0x10>
			break;
		}
		x <<= 1;
    1092:	22 0f       	add	r18, r18
    1094:	33 1f       	adc	r19, r19
//	Logarithms
//
signed char sd_log2(unsigned short x) {
	char i;
	
	for(i = 15; i >= 0; --i) {
    1096:	81 50       	subi	r24, 0x01	; 1
		if (x & 0x8000) {
			break;
		}
		x <<= 1;
	}
    1098:	fa cf       	rjmp	.-12     	; 0x108e <sd_log2+0x4>
	return(i);
}
    109a:	08 95       	ret

0000109c <sd_L0_init>:
#define sd_L0_cson()	(PORTB &= ~_BV(PB2))
#define sd_L0_csoff()	(PORTB |=  _BV(PB2))

void sd_L0_init(void) {
	// SPI master mode
	DDRB  |=  _BV(DDB5);				// MOSI output
    109c:	25 9a       	sbi	0x04, 5	; 4
	DDRB  &= ~_BV(DDB4);				// MISO input
    109e:	24 98       	cbi	0x04, 4	; 4
	DDRB  |=  _BV(DDB3);				// SCK output
    10a0:	23 9a       	sbi	0x04, 3	; 4
	DDRB  |=  _BV(DDB2);				// SS output
    10a2:	22 9a       	sbi	0x04, 2	; 4
	PORTB |=  _BV(PB2);					// SS high level
    10a4:	2a 9a       	sbi	0x05, 2	; 5
	SPCR =								// SPI Control Register
    10a6:	81 e5       	ldi	r24, 0x51	; 81
    10a8:	8c bd       	out	0x2c, r24	; 44
										//                                       +--|--|-- 1/8
										//                                          +--|-- 1/32
										//                                             +-- 1/64
			SD_L1_SPICLKDIV |			// SPR0,1 <= sd_config.h
			0;
	SPSR =								// SPI Status Register
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	8d bd       	out	0x2d, r24	; 45
			_BV(SPI2X) |				// Double SPI Speed Bit -> See SPCR
			0;


	return;
}
    10ae:	08 95       	ret

000010b0 <sd_L0_term>:

void sd_L0_term() {
	SPCR = 0;
    10b0:	1c bc       	out	0x2c, r1	; 44
}
    10b2:	08 95       	ret

000010b4 <sd_L0_send>:

void sd_L0_send(unsigned char c) {
	SPDR = c;
    10b4:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & _BV(SPIF)));
    10b6:	0d b4       	in	r0, 0x2d	; 45
    10b8:	07 fe       	sbrs	r0, 7
    10ba:	fd cf       	rjmp	.-6      	; 0x10b6 <sd_L0_send+0x2>

	return;
}
    10bc:	08 95       	ret

000010be <sd_L0_recv>:

unsigned char sd_L0_recv(int retry) {	// Recieve data, 0xff=TimeOut
	unsigned char t;

	if (retry > 0) {
    10be:	18 16       	cp	r1, r24
    10c0:	19 06       	cpc	r1, r25
    10c2:	2c f0       	brlt	.+10     	; 0x10ce <sd_L0_recv+0x10>
		t = 0xff;
	} else {
		t = 0x00;
		retry = -retry;
    10c4:	90 95       	com	r25
    10c6:	81 95       	neg	r24
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
	unsigned char t;

	if (retry > 0) {
		t = 0xff;
	} else {
		t = 0x00;
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	0b c0       	rjmp	.+22     	; 0x10e4 <sd_L0_recv+0x26>

unsigned char sd_L0_recv(int retry) {	// Recieve data, 0xff=TimeOut
	unsigned char t;

	if (retry > 0) {
		t = 0xff;
    10ce:	2f ef       	ldi	r18, 0xFF	; 255
    10d0:	09 c0       	rjmp	.+18     	; 0x10e4 <sd_L0_recv+0x26>
		t = 0x00;
		retry = -retry;
	}

	for(; retry > 0; --retry) {
		SPDR = 0xff;
    10d2:	3e bd       	out	0x2e, r19	; 46
		while(!(SPSR & _BV(SPIF)));
    10d4:	0d b4       	in	r0, 0x2d	; 45
    10d6:	07 fe       	sbrs	r0, 7
    10d8:	fd cf       	rjmp	.-6      	; 0x10d4 <sd_L0_recv+0x16>
		if (SPDR != t) {
    10da:	4e b5       	in	r20, 0x2e	; 46
    10dc:	42 17       	cp	r20, r18
    10de:	29 f4       	brne	.+10     	; 0x10ea <sd_L0_recv+0x2c>
	} else {
		t = 0x00;
		retry = -retry;
	}

	for(; retry > 0; --retry) {
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	01 c0       	rjmp	.+2      	; 0x10e6 <sd_L0_recv+0x28>
		SPDR = 0xff;
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
	} else {
		t = 0x00;
		retry = -retry;
	}

	for(; retry > 0; --retry) {
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	a1 f7       	brne	.-24     	; 0x10d2 <sd_L0_recv+0x14>
#if (SD_WAIT_UNIT > 0)
		delay_50uTimes(SD_WAIT_UNIT);
#endif
	}

	return(SPDR);
    10ea:	8e b5       	in	r24, 0x2e	; 46
}
    10ec:	08 95       	ret

000010ee <sd_L1_crc7>:

//
//	Generate cyclical redundancy check code
//
#ifdef SD_OPT_CRC
unsigned char sd_L1_crc7(char *buf, int len) {
    10ee:	fc 01       	movw	r30, r24
	unsigned short	a;				// 0xAABB  A=XORbit B=NextData
	signed char		j;
	
	a = 0;
	for(len += 1; len > 0; --len) {
    10f0:	6f 5f       	subi	r22, 0xFF	; 255
    10f2:	7f 4f       	sbci	r23, 0xFF	; 255
#ifdef SD_OPT_CRC
unsigned char sd_L1_crc7(char *buf, int len) {
	unsigned short	a;				// 0xAABB  A=XORbit B=NextData
	signed char		j;
	
	a = 0;
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
		if (len > 1) {
			a |= (unsigned char)*buf++;
		}
		for(j = 8; j > 0; --j) {
			if (a & 0x8000) {
				a ^= 0x8900;		// Polynom(high bit on)
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	59 e8       	ldi	r21, 0x89	; 137
unsigned char sd_L1_crc7(char *buf, int len) {
	unsigned short	a;				// 0xAABB  A=XORbit B=NextData
	signed char		j;
	
	a = 0;
	for(len += 1; len > 0; --len) {
    10fc:	12 c0       	rjmp	.+36     	; 0x1122 <sd_L1_crc7+0x34>
		if (len > 1) {
    10fe:	61 30       	cpi	r22, 0x01	; 1
    1100:	71 05       	cpc	r23, r1
    1102:	21 f0       	breq	.+8      	; 0x110c <sd_L1_crc7+0x1e>
			a |= (unsigned char)*buf++;
    1104:	81 91       	ld	r24, Z+
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	28 2b       	or	r18, r24
    110a:	39 2b       	or	r19, r25

//
//	Generate cyclical redundancy check code
//
#ifdef SD_OPT_CRC
unsigned char sd_L1_crc7(char *buf, int len) {
    110c:	88 e0       	ldi	r24, 0x08	; 8
	for(len += 1; len > 0; --len) {
		if (len > 1) {
			a |= (unsigned char)*buf++;
		}
		for(j = 8; j > 0; --j) {
			if (a & 0x8000) {
    110e:	37 ff       	sbrs	r19, 7
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <sd_L1_crc7+0x28>
				a ^= 0x8900;		// Polynom(high bit on)
    1112:	24 27       	eor	r18, r20
    1114:	35 27       	eor	r19, r21
			}
			a <<= 1;
    1116:	22 0f       	add	r18, r18
    1118:	33 1f       	adc	r19, r19
    111a:	81 50       	subi	r24, 0x01	; 1
	a = 0;
	for(len += 1; len > 0; --len) {
		if (len > 1) {
			a |= (unsigned char)*buf++;
		}
		for(j = 8; j > 0; --j) {
    111c:	c1 f7       	brne	.-16     	; 0x110e <sd_L1_crc7+0x20>
unsigned char sd_L1_crc7(char *buf, int len) {
	unsigned short	a;				// 0xAABB  A=XORbit B=NextData
	signed char		j;
	
	a = 0;
	for(len += 1; len > 0; --len) {
    111e:	61 50       	subi	r22, 0x01	; 1
    1120:	70 40       	sbci	r23, 0x00	; 0
    1122:	16 16       	cp	r1, r22
    1124:	17 06       	cpc	r1, r23
    1126:	5c f3       	brlt	.-42     	; 0x10fe <sd_L1_crc7+0x10>
			}
			a <<= 1;
		}
	}
	return(a >> 9);
}
    1128:	83 2f       	mov	r24, r19
    112a:	86 95       	lsr	r24
    112c:	08 95       	ret

0000112e <sd_L1_crc16>:
		}
	}
	return(a >> 8);
}
#else
unsigned short sd_L1_crc16(char *buf, int len) {	// len <= 512
    112e:	cf 92       	push	r12
    1130:	df 92       	push	r13
    1132:	ef 92       	push	r14
    1134:	ff 92       	push	r15
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	ec 01       	movw	r28, r24
    1140:	fb 01       	movw	r30, r22
	int				i;
	int				j;
	signed char		k;
	
	a = 0;
	j = len + 2;
    1142:	8b 01       	movw	r16, r22
    1144:	0e 5f       	subi	r16, 0xFE	; 254
    1146:	1f 4f       	sbci	r17, 0xFF	; 255
	for(i = 0; i < j; i++) {
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
	unsigned long	a;					// 0x00AAAABB  A=XORbit B=NextData
	int				i;
	int				j;
	signed char		k;
	
	a = 0;
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	ba 01       	movw	r22, r20
			a |= (unsigned char)*buf++;
		}
		for (k = 8; k > 0; --k) {
			a <<= 1;
			if (a & 0x01000000) {
				a ^= 0x01102100;		// Polynom(high bit on)
    1152:	c1 2c       	mov	r12, r1
    1154:	b1 e2       	ldi	r27, 0x21	; 33
    1156:	db 2e       	mov	r13, r27
    1158:	b0 e1       	ldi	r27, 0x10	; 16
    115a:	eb 2e       	mov	r14, r27
    115c:	b1 e0       	ldi	r27, 0x01	; 1
    115e:	fb 2e       	mov	r15, r27
	int				j;
	signed char		k;
	
	a = 0;
	j = len + 2;
	for(i = 0; i < j; i++) {
    1160:	1a c0       	rjmp	.+52     	; 0x1196 <sd_L1_crc16+0x68>
		if (i < len) {
    1162:	2e 17       	cp	r18, r30
    1164:	3f 07       	cpc	r19, r31
    1166:	44 f4       	brge	.+16     	; 0x1178 <sd_L1_crc16+0x4a>
			a |= (unsigned char)*buf++;
    1168:	89 91       	ld	r24, Y+
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a0 e0       	ldi	r26, 0x00	; 0
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	48 2b       	or	r20, r24
    1172:	59 2b       	or	r21, r25
    1174:	6a 2b       	or	r22, r26
    1176:	7b 2b       	or	r23, r27
		}
	}
	return(a >> 8);
}
#else
unsigned short sd_L1_crc16(char *buf, int len) {	// len <= 512
    1178:	88 e0       	ldi	r24, 0x08	; 8
	for(i = 0; i < j; i++) {
		if (i < len) {
			a |= (unsigned char)*buf++;
		}
		for (k = 8; k > 0; --k) {
			a <<= 1;
    117a:	44 0f       	add	r20, r20
    117c:	55 1f       	adc	r21, r21
    117e:	66 1f       	adc	r22, r22
    1180:	77 1f       	adc	r23, r23
			if (a & 0x01000000) {
    1182:	70 ff       	sbrs	r23, 0
    1184:	04 c0       	rjmp	.+8      	; 0x118e <sd_L1_crc16+0x60>
				a ^= 0x01102100;		// Polynom(high bit on)
    1186:	4c 25       	eor	r20, r12
    1188:	5d 25       	eor	r21, r13
    118a:	6e 25       	eor	r22, r14
    118c:	7f 25       	eor	r23, r15
    118e:	81 50       	subi	r24, 0x01	; 1
	j = len + 2;
	for(i = 0; i < j; i++) {
		if (i < len) {
			a |= (unsigned char)*buf++;
		}
		for (k = 8; k > 0; --k) {
    1190:	a1 f7       	brne	.-24     	; 0x117a <sd_L1_crc16+0x4c>
	int				j;
	signed char		k;
	
	a = 0;
	j = len + 2;
	for(i = 0; i < j; i++) {
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	20 17       	cp	r18, r16
    1198:	31 07       	cpc	r19, r17
    119a:	1c f3       	brlt	.-58     	; 0x1162 <sd_L1_crc16+0x34>
			if (a & 0x01000000) {
				a ^= 0x01102100;		// Polynom(high bit on)
			}
		}
	}
	return(a >> 8);
    119c:	45 2f       	mov	r20, r21
    119e:	56 2f       	mov	r21, r22
    11a0:	67 2f       	mov	r22, r23
    11a2:	77 27       	eor	r23, r23
}
    11a4:	ca 01       	movw	r24, r20
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	08 95       	ret

000011b8 <sd_L1_cmd_r1>:


//
//	Send SD command and Recieve response
//
unsigned char sd_L1_cmd_r1(char cmd, unsigned long prm) {	// Response code,  0:normal
    11b8:	cf 92       	push	r12
    11ba:	df 92       	push	r13
    11bc:	ef 92       	push	r14
    11be:	ff 92       	push	r15
    11c0:	0f 93       	push	r16
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <sd_L1_cmd_r1+0x12>
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <sd_L1_cmd_r1+0x14>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <sd_L1_cmd_r1+0x16>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
//	char			i;					// DEL 2010.07.07
	unsigned char	i;					// ADD 2010.07.07
	char			j;
	unsigned char	r;
	
	buf[0] = (cmd & 0x3f) | 0x40;
    11d2:	8f 73       	andi	r24, 0x3F	; 63
    11d4:	80 64       	ori	r24, 0x40	; 64
    11d6:	89 83       	std	Y+1, r24	; 0x01
	buf[1] = prm >> 24;
    11d8:	7a 83       	std	Y+2, r23	; 0x02
	buf[2] = prm >> 16;
    11da:	6b 83       	std	Y+3, r22	; 0x03
	buf[3] = prm >> 8;
    11dc:	5c 83       	std	Y+4, r21	; 0x04
	buf[4] = prm;
    11de:	4d 83       	std	Y+5, r20	; 0x05
#ifdef SD_OPT_CRC
	buf[5] = (sd_L1_crc7(buf, sizeof(buf) - 1) << 1) | 0x01;
    11e0:	8e 01       	movw	r16, r28
    11e2:	0f 5f       	subi	r16, 0xFF	; 255
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	c8 01       	movw	r24, r16
    11e8:	65 e0       	ldi	r22, 0x05	; 5
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	0e 94 77 08 	call	0x10ee	; 0x10ee <sd_L1_crc7>
    11f0:	88 0f       	add	r24, r24
    11f2:	81 60       	ori	r24, 0x01	; 1
    11f4:	8e 83       	std	Y+6, r24	; 0x06
    11f6:	23 e0       	ldi	r18, 0x03	; 3
    11f8:	f2 2e       	mov	r15, r18

	// Try loop
	for(j = SD_RETRY_CMD; j > 0; --j) {

		// Command
		sd_L0_send(0xff);				// Stable (Kingston accept)
    11fa:	d0 2e       	mov	r13, r16
    11fc:	e1 2e       	mov	r14, r17
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
    1204:	0d 2d       	mov	r16, r13
    1206:	1e 2d       	mov	r17, r14
    1208:	86 e0       	ldi	r24, 0x06	; 6
    120a:	c8 2e       	mov	r12, r24
		for(i = 0; i < sizeof(buf); i++) {
			sd_L0_send(buf[i]);
    120c:	f8 01       	movw	r30, r16
    120e:	81 91       	ld	r24, Z+
    1210:	8f 01       	movw	r16, r30
    1212:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
    1216:	ca 94       	dec	r12
	// Try loop
	for(j = SD_RETRY_CMD; j > 0; --j) {

		// Command
		sd_L0_send(0xff);				// Stable (Kingston accept)
		for(i = 0; i < sizeof(buf); i++) {
    1218:	c9 f7       	brne	.-14     	; 0x120c <sd_L1_cmd_r1+0x54>
			sd_L0_send(buf[i]);
		}
	
		// Response
		r = sd_L0_recv(SD_WAIT_RESPONSE);
    121a:	8a e0       	ldi	r24, 0x0A	; 10
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 5f 08 	call	0x10be	; 0x10be <sd_L0_recv>
		if ((r & ~SD_R1_IDLE_STATE) == 0x00) {
    1222:	98 2f       	mov	r25, r24
    1224:	9e 7f       	andi	r25, 0xFE	; 254
    1226:	11 f0       	breq	.+4      	; 0x122c <sd_L1_cmd_r1+0x74>
    1228:	fa 94       	dec	r15
#else
	buf[5] = 0x95;						// CMD0(GO_IDLE_STATE)CRC
#endif

	// Try loop
	for(j = SD_RETRY_CMD; j > 0; --j) {
    122a:	49 f7       	brne	.-46     	; 0x11fe <sd_L1_cmd_r1+0x46>
			break;
		}
	}

	return(r);
}
    122c:	26 96       	adiw	r28, 0x06	; 6
    122e:	0f b6       	in	r0, 0x3f	; 63
    1230:	f8 94       	cli
    1232:	de bf       	out	0x3e, r29	; 62
    1234:	0f be       	out	0x3f, r0	; 63
    1236:	cd bf       	out	0x3d, r28	; 61
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	08 95       	ret

0000124a <sd_L1_open>:


//
//	Open: Initiate SDcard device
//
unsigned char sd_L1_open(void){			// Response code, 0:normal
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
	int				i;
	unsigned char	r;
	
	// Attach User module
	sd_L0_init();
    1250:	0e 94 4e 08 	call	0x109c	; 0x109c <sd_L0_init>
    1254:	ca e0       	ldi	r28, 0x0A	; 10
    1256:	d0 e0       	ldi	r29, 0x00	; 0
	
	// Power on, wait init sequence
	for(i = SD_WAIT_POWERUP; i > 0; --i) {
		sd_L0_send(0xff);
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
    125e:	21 97       	sbiw	r28, 0x01	; 1
	
	// Attach User module
	sd_L0_init();
	
	// Power on, wait init sequence
	for(i = SD_WAIT_POWERUP; i > 0; --i) {
    1260:	d9 f7       	brne	.-10     	; 0x1258 <sd_L1_open+0xe>
		sd_L0_send(0xff);
	}

	// Card reset
	sd_L0_cson();
    1262:	2a 98       	cbi	0x05, 2	; 5
	r = sd_L1_cmd_r1(0, 0);				// GO_IDLE_STATE
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	50 e0       	ldi	r21, 0x00	; 0
    126a:	ba 01       	movw	r22, r20
    126c:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <sd_L1_cmd_r1>
	sd_L0_send(0xff);					// stable (go to standby)
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
	sd_L0_csoff();
    1276:	2a 9a       	sbi	0x05, 2	; 5
    1278:	c4 e6       	ldi	r28, 0x64	; 100
    127a:	d0 e0       	ldi	r29, 0x00	; 0

	// Wait idle process
	for(i = SD_WAIT_INIT_COUNT; i > 0; --i) {
		sd_L0_cson();
    127c:	2a 98       	cbi	0x05, 2	; 5
		r = sd_L1_cmd_r1(55, 0);		// APP_CMD
    127e:	87 e3       	ldi	r24, 0x37	; 55
    1280:	40 e0       	ldi	r20, 0x00	; 0
    1282:	50 e0       	ldi	r21, 0x00	; 0
    1284:	ba 01       	movw	r22, r20
    1286:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <sd_L1_cmd_r1>
		r = sd_L1_cmd_r1(41, 0);		// SD_SEND_OP_COND
    128a:	89 e2       	ldi	r24, 0x29	; 41
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	50 e0       	ldi	r21, 0x00	; 0
    1290:	ba 01       	movw	r22, r20
    1292:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <sd_L1_cmd_r1>
    1296:	18 2f       	mov	r17, r24
		sd_L0_send(0xff);				// stable (go to standby)
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
		sd_L0_csoff();
    129e:	2a 9a       	sbi	0x05, 2	; 5
		if (!(r & SD_R1_IDLE_STATE)) {
    12a0:	10 fd       	sbrc	r17, 0
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <sd_L1_open+0x60>
		delay_1mTimes(SD_WAIT_INIT_INTERVAL);
	}

	// CRC enable
#ifdef SD_OPT_CRC
	if (r == 0x00) {
    12a4:	11 23       	and	r17, r17
    12a6:	a1 f4       	brne	.+40     	; 0x12d0 <sd_L1_open+0x86>
    12a8:	06 c0       	rjmp	.+12     	; 0x12b6 <sd_L1_open+0x6c>
		sd_L0_send(0xff);				// stable (go to standby)
		sd_L0_csoff();
		if (!(r & SD_R1_IDLE_STATE)) {
			break;
		}
		delay_1mTimes(SD_WAIT_INIT_INTERVAL);
    12aa:	8a e0       	ldi	r24, 0x0A	; 10
    12ac:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
    12b0:	21 97       	sbiw	r28, 0x01	; 1
	r = sd_L1_cmd_r1(0, 0);				// GO_IDLE_STATE
	sd_L0_send(0xff);					// stable (go to standby)
	sd_L0_csoff();

	// Wait idle process
	for(i = SD_WAIT_INIT_COUNT; i > 0; --i) {
    12b2:	21 f7       	brne	.-56     	; 0x127c <sd_L1_open+0x32>
    12b4:	0d c0       	rjmp	.+26     	; 0x12d0 <sd_L1_open+0x86>
	}

	// CRC enable
#ifdef SD_OPT_CRC
	if (r == 0x00) {
		sd_L0_cson();
    12b6:	2a 98       	cbi	0x05, 2	; 5
		r = sd_L1_cmd_r1(59, 1);		// CRC_ON_OFF
    12b8:	8b e3       	ldi	r24, 0x3B	; 59
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <sd_L1_cmd_r1>
    12c6:	18 2f       	mov	r17, r24
		sd_L0_send(0xff);				// stable (go to standby)
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
		sd_L0_csoff();
    12ce:	2a 9a       	sbi	0x05, 2	; 5
	}
#endif

	i2c_lcd_position(0,0);	i2c_lcd_prCString("L1open="); i2c_lcd_prHexByte(r);
	return(r);
}
    12d0:	81 2f       	mov	r24, r17
    12d2:	df 91       	pop	r29
    12d4:	cf 91       	pop	r28
    12d6:	1f 91       	pop	r17
    12d8:	08 95       	ret

000012da <sd_L1_close>:

	return;
}

void sd_L0_term() {
	SPCR = 0;
    12da:	1c bc       	out	0x2c, r1	; 44
	// dettach User module
    sd_L0_term();

	i2c_lcd_position(0,0);	i2c_lcd_prCString("L1close ");
	return;
}
    12dc:	08 95       	ret

000012de <sd_L1_read>:
//	Read 1 block
//
#ifdef SD_OPT_BUF256
unsigned char sd_L1_read(long sect, char *buf1, char *buf2){	// Response code, 0:normal
#else
unsigned char sd_L1_read(long sect, char *buf){	// Response code, 0:normal
    12de:	6f 92       	push	r6
    12e0:	7f 92       	push	r7
    12e2:	8f 92       	push	r8
    12e4:	9f 92       	push	r9
    12e6:	af 92       	push	r10
    12e8:	bf 92       	push	r11
    12ea:	cf 92       	push	r12
    12ec:	df 92       	push	r13
    12ee:	ef 92       	push	r14
    12f0:	ff 92       	push	r15
    12f2:	0f 93       	push	r16
    12f4:	1f 93       	push	r17
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	6b 01       	movw	r12, r22
    12fc:	7c 01       	movw	r14, r24
    12fe:	94 2e       	mov	r9, r20
    1300:	85 2e       	mov	r8, r21
		for(;;) {
			char	*p;
			int		i;
		
			// Read cmd
			r = sd_L1_cmd_r1(17, sect << 9);	// READ_SINGLE_BLOCK
    1302:	39 e0       	ldi	r19, 0x09	; 9
    1304:	cc 0c       	add	r12, r12
    1306:	dd 1c       	adc	r13, r13
    1308:	ee 1c       	adc	r14, r14
    130a:	ff 1c       	adc	r15, r15
    130c:	3a 95       	dec	r19
    130e:	d1 f7       	brne	.-12     	; 0x1304 <sd_L1_read+0x26>
    1310:	03 e0       	ldi	r16, 0x03	; 3

	// Try loop
	for(j = SD_RETRY_READ; j > 0; --j) {

		// Transaction start
		sd_L0_cson();
    1312:	2a 98       	cbi	0x05, 2	; 5
		for(;;) {
			char	*p;
			int		i;
		
			// Read cmd
			r = sd_L1_cmd_r1(17, sect << 9);	// READ_SINGLE_BLOCK
    1314:	81 e1       	ldi	r24, 0x11	; 17
    1316:	b7 01       	movw	r22, r14
    1318:	a6 01       	movw	r20, r12
    131a:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <sd_L1_cmd_r1>
    131e:	18 2f       	mov	r17, r24
			if (r != 0x00) {
    1320:	88 23       	and	r24, r24
    1322:	39 f5       	brne	.+78     	; 0x1372 <sd_L1_read+0x94>
				break;
			}
		
			// Wait start data block talken
			r = sd_L0_recv(SD_WAIT_READ);
    1324:	80 e1       	ldi	r24, 0x10	; 16
    1326:	97 e2       	ldi	r25, 0x27	; 39
    1328:	0e 94 5f 08 	call	0x10be	; 0x10be <sd_L0_recv>
			if (r != 0xfe) {
    132c:	8e 3f       	cpi	r24, 0xFE	; 254
    132e:	21 f0       	breq	.+8      	; 0x1338 <sd_L1_read+0x5a>
				if (r == 0) {
    1330:	88 23       	and	r24, r24
    1332:	f1 f0       	breq	.+60     	; 0x1370 <sd_L1_read+0x92>
    1334:	18 2f       	mov	r17, r24
    1336:	1d c0       	rjmp	.+58     	; 0x1372 <sd_L1_read+0x94>
				break;
			}
		
			// Wait start data block talken
			r = sd_L0_recv(SD_WAIT_READ);
			if (r != 0xfe) {
    1338:	69 2c       	mov	r6, r9
    133a:	78 2c       	mov	r7, r8
    133c:	c2 e0       	ldi	r28, 0x02	; 2
    133e:	d2 e0       	ldi	r29, 0x02	; 2
				}
			}
#else
			p = buf;
			for(i = SD_BUFSZ+2; i > 0; --i) {
				r = sd_L0_recv(1);		// no retry
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 5f 08 	call	0x10be	; 0x10be <sd_L0_recv>
				if (i > 2) {
    1348:	c3 30       	cpi	r28, 0x03	; 3
    134a:	d1 05       	cpc	r29, r1
    134c:	24 f0       	brlt	.+8      	; 0x1356 <sd_L1_read+0x78>
					*p++ = r;
    134e:	f3 01       	movw	r30, r6
    1350:	81 93       	st	Z+, r24
    1352:	3f 01       	movw	r6, r30
    1354:	0a c0       	rjmp	.+20     	; 0x136a <sd_L1_read+0x8c>
				} else if (i == 2) {
    1356:	c2 30       	cpi	r28, 0x02	; 2
    1358:	d1 05       	cpc	r29, r1
    135a:	19 f4       	brne	.+6      	; 0x1362 <sd_L1_read+0x84>
					c = (unsigned short)r << 8;
    135c:	b8 2e       	mov	r11, r24
    135e:	aa 24       	eor	r10, r10
    1360:	04 c0       	rjmp	.+8      	; 0x136a <sd_L1_read+0x8c>
				} else {
					c |= r;
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	a2 2a       	or	r10, r18
    1368:	b3 2a       	or	r11, r19
					c |= r;
				}
			}
#else
			p = buf;
			for(i = SD_BUFSZ+2; i > 0; --i) {
    136a:	21 97       	sbiw	r28, 0x01	; 1
    136c:	49 f7       	brne	.-46     	; 0x1340 <sd_L1_read+0x62>
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <sd_L1_read+0x94>
		
			// Wait start data block talken
			r = sd_L0_recv(SD_WAIT_READ);
			if (r != 0xfe) {
				if (r == 0) {
					r = 0xff;
    1370:	1f ef       	ldi	r17, 0xFF	; 255
			r = 0x00;
			break;
		}
		
		// Transaction end
		sd_L0_send(0xff);				// stable (go to standby)
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
		sd_L0_csoff();
    1378:	2a 9a       	sbi	0x05, 2	; 5

		// Normal
		if (r == 0x00) {
    137a:	11 23       	and	r17, r17
    137c:	51 f4       	brne	.+20     	; 0x1392 <sd_L1_read+0xb4>
			if (sd_L1_crc16(buf1, buf2, SD_BUFSZ) != c) {
				r = SD_R1_CRC_ERR;
				continue;
			}
#else
			if (sd_L1_crc16(buf, SD_BUFSZ) != c) {
    137e:	89 2d       	mov	r24, r9
    1380:	98 2d       	mov	r25, r8
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	72 e0       	ldi	r23, 0x02	; 2
    1386:	0e 94 97 08 	call	0x112e	; 0x112e <sd_L1_crc16>
    138a:	8a 15       	cp	r24, r10
    138c:	9b 05       	cpc	r25, r11
    138e:	21 f0       	breq	.+8      	; 0x1398 <sd_L1_read+0xba>
				r = SD_R1_CRC_ERR;
    1390:	18 e0       	ldi	r17, 0x08	; 8
			if (sd_L1_crc16(buf1, buf2, SD_BUFSZ) != c) {
				r = SD_R1_CRC_ERR;
				continue;
			}
#else
			if (sd_L1_crc16(buf, SD_BUFSZ) != c) {
    1392:	01 50       	subi	r16, 0x01	; 1
	unsigned char	r;
	char			j;
	unsigned short	c;

	// Try loop
	for(j = SD_RETRY_READ; j > 0; --j) {
    1394:	09 f0       	breq	.+2      	; 0x1398 <sd_L1_read+0xba>
    1396:	bd cf       	rjmp	.-134    	; 0x1312 <sd_L1_read+0x34>
		}
	}

	i2c_lcd_position(0,0);	i2c_lcd_prCString("L1read="); i2c_lcd_prHexByte(r);
	return(r);
}
    1398:	81 2f       	mov	r24, r17
    139a:	df 91       	pop	r29
    139c:	cf 91       	pop	r28
    139e:	1f 91       	pop	r17
    13a0:	0f 91       	pop	r16
    13a2:	ff 90       	pop	r15
    13a4:	ef 90       	pop	r14
    13a6:	df 90       	pop	r13
    13a8:	cf 90       	pop	r12
    13aa:	bf 90       	pop	r11
    13ac:	af 90       	pop	r10
    13ae:	9f 90       	pop	r9
    13b0:	8f 90       	pop	r8
    13b2:	7f 90       	pop	r7
    13b4:	6f 90       	pop	r6
    13b6:	08 95       	ret

000013b8 <sd_L1_write>:
//
#ifdef SD_OPT_WRITE
#ifdef SD_OPT_BUF256
unsigned char sd_L1_write(long sect, char *buf1, char *buf2){	// Response code, 0:normal
#else
unsigned char sd_L1_write(long sect, char *buf){	// Response code, 0:normal
    13b8:	6f 92       	push	r6
    13ba:	7f 92       	push	r7
    13bc:	8f 92       	push	r8
    13be:	9f 92       	push	r9
    13c0:	af 92       	push	r10
    13c2:	bf 92       	push	r11
    13c4:	cf 92       	push	r12
    13c6:	df 92       	push	r13
    13c8:	ef 92       	push	r14
    13ca:	ff 92       	push	r15
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	6b 01       	movw	r12, r22
    13d6:	7c 01       	movw	r14, r24
    13d8:	04 2f       	mov	r16, r20
    13da:	b5 2e       	mov	r11, r21
#ifdef SD_OPT_CRC

#ifdef SD_OPT_BUF256
	c = sd_L1_crc16(buf1, buf2, SD_BUFSZ);
#else
	c = sd_L1_crc16(buf, SD_BUFSZ);
    13dc:	84 2f       	mov	r24, r20
    13de:	95 2f       	mov	r25, r21
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	72 e0       	ldi	r23, 0x02	; 2
    13e4:	0e 94 97 08 	call	0x112e	; 0x112e <sd_L1_crc16>
    13e8:	a8 2e       	mov	r10, r24
    13ea:	79 2e       	mov	r7, r25
		for(;;) {
			char	*p;
			int		i;
		
			// Write cmd
			r = sd_L1_cmd_r1(24, sect << 9);	// WRITE_BLOCK
    13ec:	49 e0       	ldi	r20, 0x09	; 9
    13ee:	cc 0c       	add	r12, r12
    13f0:	dd 1c       	adc	r13, r13
    13f2:	ee 1c       	adc	r14, r14
    13f4:	ff 1c       	adc	r15, r15
    13f6:	4a 95       	dec	r20
    13f8:	d1 f7       	brne	.-12     	; 0x13ee <sd_L1_write+0x36>
			
				d = 0;
				if (i > 2) {
					d = *p++;
				} else if (i == 2) {
					d = c >> 8;
    13fa:	13 e0       	ldi	r17, 0x03	; 3

	// Try loop
	for(j = SD_RETRY_WRITE; j > 0; --j) {

		// Transaction start
		sd_L0_cson();
    13fc:	2a 98       	cbi	0x05, 2	; 5
		for(;;) {
			char	*p;
			int		i;
		
			// Write cmd
			r = sd_L1_cmd_r1(24, sect << 9);	// WRITE_BLOCK
    13fe:	88 e1       	ldi	r24, 0x18	; 24
    1400:	b7 01       	movw	r22, r14
    1402:	a6 01       	movw	r20, r12
    1404:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <sd_L1_cmd_r1>
    1408:	68 2e       	mov	r6, r24
			if(r != 0x00) {
    140a:	88 23       	and	r24, r24
    140c:	41 f5       	brne	.+80     	; 0x145e <sd_L1_write+0xa6>
				break;
			}
	
			// Start data block talken
			sd_L0_send(0xfe);
    140e:	8e ef       	ldi	r24, 0xFE	; 254
    1410:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
					d = c & 0xff;
				}
				sd_L0_send(d);
			}
#else
			p = buf;
    1414:	80 2e       	mov	r8, r16
    1416:	9b 2c       	mov	r9, r11
			for(i = SD_BUFSZ+2; i > 0; --i) {
    1418:	c2 e0       	ldi	r28, 0x02	; 2
    141a:	d2 e0       	ldi	r29, 0x02	; 2
				unsigned char d;
			
				d = 0;
				if (i > 2) {
    141c:	c3 30       	cpi	r28, 0x03	; 3
    141e:	d1 05       	cpc	r29, r1
    1420:	24 f0       	brlt	.+8      	; 0x142a <sd_L1_write+0x72>
					d = *p++;
    1422:	f4 01       	movw	r30, r8
    1424:	81 91       	ld	r24, Z+
    1426:	4f 01       	movw	r8, r30
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <sd_L1_write+0x7e>
				} else if (i == 2) {
    142a:	c2 30       	cpi	r28, 0x02	; 2
    142c:	d1 05       	cpc	r29, r1
    142e:	11 f0       	breq	.+4      	; 0x1434 <sd_L1_write+0x7c>
					d = c >> 8;
				} else {
					d = c & 0xff;
    1430:	8a 2d       	mov	r24, r10
    1432:	01 c0       	rjmp	.+2      	; 0x1436 <sd_L1_write+0x7e>
			
				d = 0;
				if (i > 2) {
					d = *p++;
				} else if (i == 2) {
					d = c >> 8;
    1434:	87 2d       	mov	r24, r7
				} else {
					d = c & 0xff;
				}
				sd_L0_send(d);
    1436:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
				}
				sd_L0_send(d);
			}
#else
			p = buf;
			for(i = SD_BUFSZ+2; i > 0; --i) {
    143a:	21 97       	sbiw	r28, 0x01	; 1
    143c:	79 f7       	brne	.-34     	; 0x141c <sd_L1_write+0x64>
				sd_L0_send(d);
			}
#endif // SD_OPT_BUF256

			// wait response
			r = sd_L0_recv(SD_WAIT_RESPONSE);
    143e:	8a e0       	ldi	r24, 0x0A	; 10
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 94 5f 08 	call	0x10be	; 0x10be <sd_L0_recv>
			if ((r & 0x1f) != 0x05) {
    1446:	98 2f       	mov	r25, r24
    1448:	9f 71       	andi	r25, 0x1F	; 31
    144a:	95 30       	cpi	r25, 0x05	; 5
    144c:	39 f4       	brne	.+14     	; 0x145c <sd_L1_write+0xa4>
				break;
			}

			// Busy wait
			r = sd_L0_recv(-SD_WAIT_WRITE);	// wait 0x00 to 0xff
    144e:	80 ef       	ldi	r24, 0xF0	; 240
    1450:	98 ed       	ldi	r25, 0xD8	; 216
    1452:	0e 94 5f 08 	call	0x10be	; 0x10be <sd_L0_recv>
			if (r != 0x00) {
    1456:	88 23       	and	r24, r24
    1458:	91 f2       	breq	.-92     	; 0x13fe <sd_L1_write+0x46>
    145a:	01 c0       	rjmp	.+2      	; 0x145e <sd_L1_write+0xa6>
				sd_L0_send(d);
			}
#endif // SD_OPT_BUF256

			// wait response
			r = sd_L0_recv(SD_WAIT_RESPONSE);
    145c:	68 2e       	mov	r6, r24
				break;
			}
		}
		
		// Transaction end
		sd_L0_send(0xff);				// stable (go to standby)
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
		sd_L0_csoff();
    1464:	2a 9a       	sbi	0x05, 2	; 5

		// Normal
		if (r == 0x00) {
    1466:	66 20       	and	r6, r6
    1468:	11 f0       	breq	.+4      	; 0x146e <sd_L1_write+0xb6>
    146a:	11 50       	subi	r17, 0x01	; 1
#else
	c = 0;
#endif // SD_OPT_CRC

	// Try loop
	for(j = SD_RETRY_WRITE; j > 0; --j) {
    146c:	39 f6       	brne	.-114    	; 0x13fc <sd_L1_write+0x44>
		}
	}

	i2c_lcd_position(0,0);	i2c_lcd_prCString("L1close="); i2c_lcd_prHexByte(r);
	return(r);
}
    146e:	86 2d       	mov	r24, r6
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	1f 91       	pop	r17
    1476:	0f 91       	pop	r16
    1478:	ff 90       	pop	r15
    147a:	ef 90       	pop	r14
    147c:	df 90       	pop	r13
    147e:	cf 90       	pop	r12
    1480:	bf 90       	pop	r11
    1482:	af 90       	pop	r10
    1484:	9f 90       	pop	r9
    1486:	8f 90       	pop	r8
    1488:	7f 90       	pop	r7
    148a:	6f 90       	pop	r6
    148c:	08 95       	ret

0000148e <sd_L1_getinfo>:

//
//	Get card information
//
#ifdef SD_OPT_GETINFO
unsigned char sd_L1_getinfo(void *info, char type){
    148e:	6f 92       	push	r6
    1490:	7f 92       	push	r7
    1492:	9f 92       	push	r9
    1494:	af 92       	push	r10
    1496:	bf 92       	push	r11
    1498:	cf 92       	push	r12
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	60 97       	sbiw	r28, 0x10	; 16
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	f8 94       	cli
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	0f be       	out	0x3f, r0	; 63
    14b6:	cd bf       	out	0x3d, r28	; 61
    14b8:	3c 01       	movw	r6, r24
    14ba:	96 2e       	mov	r9, r22
    14bc:	f3 e0       	ldi	r31, 0x03	; 3
    14be:	ef 2e       	mov	r14, r31

	// Try loop
	for(j = SD_RETRY_INFO; j > 0; --j) {

		// Transaction start
		sd_L0_cson();
    14c0:	2a 98       	cbi	0x05, 2	; 5
		for(;;) {
			char	*p;
			int		i;
		
			// Read cmd
			r = sd_L1_cmd_r1(9, 0);		// SEND_CSD
    14c2:	89 e0       	ldi	r24, 0x09	; 9
    14c4:	40 e0       	ldi	r20, 0x00	; 0
    14c6:	50 e0       	ldi	r21, 0x00	; 0
    14c8:	ba 01       	movw	r22, r20
    14ca:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <sd_L1_cmd_r1>
    14ce:	f8 2e       	mov	r15, r24
			if (r != 0x00) {
    14d0:	88 23       	and	r24, r24
    14d2:	51 f5       	brne	.+84     	; 0x1528 <sd_L1_getinfo+0x9a>
				break;
			}
		
			// Wait start data block talken
			r = sd_L0_recv(SD_WAIT_INFO);
    14d4:	80 e1       	ldi	r24, 0x10	; 16
    14d6:	97 e2       	ldi	r25, 0x27	; 39
    14d8:	0e 94 5f 08 	call	0x10be	; 0x10be <sd_L0_recv>
			if (r != 0xfe) {
    14dc:	8e 3f       	cpi	r24, 0xFE	; 254
    14de:	21 f0       	breq	.+8      	; 0x14e8 <sd_L1_getinfo+0x5a>
				if (r == 0) {
    14e0:	88 23       	and	r24, r24
    14e2:	01 f1       	breq	.+64     	; 0x1524 <sd_L1_getinfo+0x96>
    14e4:	f8 2e       	mov	r15, r24
    14e6:	20 c0       	rjmp	.+64     	; 0x1528 <sd_L1_getinfo+0x9a>
				break;
			}
		
			// Wait start data block talken
			r = sd_L0_recv(SD_WAIT_INFO);
			if (r != 0xfe) {
    14e8:	02 e1       	ldi	r16, 0x12	; 18
    14ea:	10 e0       	ldi	r17, 0x00	; 0
    14ec:	5e 01       	movw	r10, r28
    14ee:	08 94       	sec
    14f0:	a1 1c       	adc	r10, r1
    14f2:	b1 1c       	adc	r11, r1
			}

			// Recieve, data & CRC
			p = buf;
			for(i = sizeof(buf)+2; i > 0; --i) {
				r = sd_L0_recv(1);		// no retry
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 5f 08 	call	0x10be	; 0x10be <sd_L0_recv>
				if (i > 2) {
    14fc:	03 30       	cpi	r16, 0x03	; 3
    14fe:	11 05       	cpc	r17, r1
    1500:	24 f0       	brlt	.+8      	; 0x150a <sd_L1_getinfo+0x7c>
					*p++ = r;
    1502:	f5 01       	movw	r30, r10
    1504:	81 93       	st	Z+, r24
    1506:	5f 01       	movw	r10, r30
    1508:	09 c0       	rjmp	.+18     	; 0x151c <sd_L1_getinfo+0x8e>
				} else if (i == 2) {
    150a:	02 30       	cpi	r16, 0x02	; 2
    150c:	11 05       	cpc	r17, r1
    150e:	19 f4       	brne	.+6      	; 0x1516 <sd_L1_getinfo+0x88>
					c = (unsigned short)r << 8;
    1510:	d8 2e       	mov	r13, r24
    1512:	cc 24       	eor	r12, r12
    1514:	03 c0       	rjmp	.+6      	; 0x151c <sd_L1_getinfo+0x8e>
				} else {
					c |= r;
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	c8 2a       	or	r12, r24
    151a:	d9 2a       	or	r13, r25
				break;
			}

			// Recieve, data & CRC
			p = buf;
			for(i = sizeof(buf)+2; i > 0; --i) {
    151c:	01 50       	subi	r16, 0x01	; 1
    151e:	10 40       	sbci	r17, 0x00	; 0
    1520:	49 f7       	brne	.-46     	; 0x14f4 <sd_L1_getinfo+0x66>
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <sd_L1_getinfo+0x9a>
		
			// Wait start data block talken
			r = sd_L0_recv(SD_WAIT_INFO);
			if (r != 0xfe) {
				if (r == 0) {
					r = 0xff;
    1524:	ff 24       	eor	r15, r15
    1526:	fa 94       	dec	r15
			r = 0x00;
			break;
		}
		
		// Transaction end
		sd_L0_send(0xff);				// stable (go to standby)
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <sd_L0_send>
		sd_L0_csoff();
    152e:	2a 9a       	sbi	0x05, 2	; 5

		// Error
		if (r != 0x00) {
    1530:	ff 20       	and	r15, r15
    1532:	09 f0       	breq	.+2      	; 0x1536 <sd_L1_getinfo+0xa8>
    1534:	4c c0       	rjmp	.+152    	; 0x15ce <sd_L1_getinfo+0x140>
		if (sd_L1_crc16(buf, 0, sizeof(buf)) != c) {
			r = SD_R1_CRC_ERR;
			continue;
		}
#else
		if (sd_L1_crc16(buf, sizeof(buf)) != c) {
    1536:	ce 01       	movw	r24, r28
    1538:	01 96       	adiw	r24, 0x01	; 1
    153a:	60 e1       	ldi	r22, 0x10	; 16
    153c:	70 e0       	ldi	r23, 0x00	; 0
    153e:	0e 94 97 08 	call	0x112e	; 0x112e <sd_L1_crc16>
    1542:	8c 15       	cp	r24, r12
    1544:	9d 05       	cpc	r25, r13
    1546:	09 f0       	breq	.+2      	; 0x154a <sd_L1_getinfo+0xbc>
    1548:	40 c0       	rjmp	.+128    	; 0x15ca <sd_L1_getinfo+0x13c>
		}
#endif // SD_OPT_BUF256
#endif // SD_OPT_CRC

		// Set info
		if (type == SD_L1_INFOTYPE_MEDIASIZE) {
    154a:	99 20       	and	r9, r9
    154c:	09 f0       	breq	.+2      	; 0x1550 <sd_L1_getinfo+0xc2>
    154e:	42 c0       	rjmp	.+132    	; 0x15d4 <sd_L1_getinfo+0x146>
			short	c_size;
			int		mult;

			c_size = ((short)((unsigned char)buf[6] & 0x3) << 10)
			       | ((short)((unsigned char)buf[7]) << 2)
			       | ((unsigned char)buf[8] >> 6);
    1550:	49 85       	ldd	r20, Y+9	; 0x09
    1552:	42 95       	swap	r20
    1554:	46 95       	lsr	r20
    1556:	46 95       	lsr	r20
    1558:	43 70       	andi	r20, 0x03	; 3
    155a:	50 e0       	ldi	r21, 0x00	; 0
		if (type == SD_L1_INFOTYPE_MEDIASIZE) {
			short	c_size;
			int		mult;

			c_size = ((short)((unsigned char)buf[6] & 0x3) << 10)
			       | ((short)((unsigned char)buf[7]) << 2)
    155c:	88 85       	ldd	r24, Y+8	; 0x08
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	48 2b       	or	r20, r24
    156a:	59 2b       	or	r21, r25
		// Set info
		if (type == SD_L1_INFOTYPE_MEDIASIZE) {
			short	c_size;
			int		mult;

			c_size = ((short)((unsigned char)buf[6] & 0x3) << 10)
    156c:	8f 81       	ldd	r24, Y+7	; 0x07
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	83 70       	andi	r24, 0x03	; 3
    1572:	90 70       	andi	r25, 0x00	; 0
    1574:	98 2f       	mov	r25, r24
    1576:	88 27       	eor	r24, r24
    1578:	99 0f       	add	r25, r25
    157a:	99 0f       	add	r25, r25
    157c:	48 2b       	or	r20, r24
    157e:	59 2b       	or	r21, r25
			       | ((short)((unsigned char)buf[7]) << 2)
			       | ((unsigned char)buf[8] >> 6);
			mult = ((((unsigned char)buf[9] & 0x3) << 1) | ((unsigned char)buf[10] >> 7))
			     + 2
			     + ((unsigned char)buf[5] & 0xf);
			*((long *)info) = (long)(c_size + 1) << mult;
    1580:	4f 5f       	subi	r20, 0xFF	; 255
    1582:	5f 4f       	sbci	r21, 0xFF	; 255
    1584:	66 27       	eor	r22, r22
    1586:	57 fd       	sbrc	r21, 7
    1588:	60 95       	com	r22
    158a:	76 2f       	mov	r23, r22
			int		mult;

			c_size = ((short)((unsigned char)buf[6] & 0x3) << 10)
			       | ((short)((unsigned char)buf[7]) << 2)
			       | ((unsigned char)buf[8] >> 6);
			mult = ((((unsigned char)buf[9] & 0x3) << 1) | ((unsigned char)buf[10] >> 7))
    158c:	8a 85       	ldd	r24, Y+10	; 0x0a
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	83 70       	andi	r24, 0x03	; 3
    1592:	90 70       	andi	r25, 0x00	; 0
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	2b 85       	ldd	r18, Y+11	; 0x0b
    159a:	22 1f       	adc	r18, r18
    159c:	22 27       	eor	r18, r18
    159e:	22 1f       	adc	r18, r18
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	82 2b       	or	r24, r18
    15a4:	93 2b       	or	r25, r19
			     + 2
    15a6:	02 96       	adiw	r24, 0x02	; 2
			     + ((unsigned char)buf[5] & 0xf);
    15a8:	2e 81       	ldd	r18, Y+6	; 0x06
    15aa:	2f 70       	andi	r18, 0x0F	; 15
			int		mult;

			c_size = ((short)((unsigned char)buf[6] & 0x3) << 10)
			       | ((short)((unsigned char)buf[7]) << 2)
			       | ((unsigned char)buf[8] >> 6);
			mult = ((((unsigned char)buf[9] & 0x3) << 1) | ((unsigned char)buf[10] >> 7))
    15ac:	82 0f       	add	r24, r18
    15ae:	91 1d       	adc	r25, r1
			     + 2
			     + ((unsigned char)buf[5] & 0xf);
			*((long *)info) = (long)(c_size + 1) << mult;
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <sd_L1_getinfo+0x12c>
    15b2:	44 0f       	add	r20, r20
    15b4:	55 1f       	adc	r21, r21
    15b6:	66 1f       	adc	r22, r22
    15b8:	77 1f       	adc	r23, r23
    15ba:	8a 95       	dec	r24
    15bc:	d2 f7       	brpl	.-12     	; 0x15b2 <sd_L1_getinfo+0x124>
    15be:	f3 01       	movw	r30, r6
    15c0:	40 83       	st	Z, r20
    15c2:	51 83       	std	Z+1, r21	; 0x01
    15c4:	62 83       	std	Z+2, r22	; 0x02
    15c6:	73 83       	std	Z+3, r23	; 0x03
    15c8:	05 c0       	rjmp	.+10     	; 0x15d4 <sd_L1_getinfo+0x146>
			r = SD_R1_CRC_ERR;
			continue;
		}
#else
		if (sd_L1_crc16(buf, sizeof(buf)) != c) {
			r = SD_R1_CRC_ERR;
    15ca:	58 e0       	ldi	r21, 0x08	; 8
    15cc:	f5 2e       	mov	r15, r21
			       | ((short)((unsigned char)buf[7]) << 2)
			       | ((unsigned char)buf[8] >> 6);
			mult = ((((unsigned char)buf[9] & 0x3) << 1) | ((unsigned char)buf[10] >> 7))
			     + 2
			     + ((unsigned char)buf[5] & 0xf);
			*((long *)info) = (long)(c_size + 1) << mult;
    15ce:	ea 94       	dec	r14
	char			j;
	unsigned short	c;
	char			buf[16];

	// Try loop
	for(j = SD_RETRY_INFO; j > 0; --j) {
    15d0:	09 f0       	breq	.+2      	; 0x15d4 <sd_L1_getinfo+0x146>
    15d2:	76 cf       	rjmp	.-276    	; 0x14c0 <sd_L1_getinfo+0x32>
		break;
	}

	i2c_lcd_position(0,0);	i2c_lcd_prCString("L1info="); i2c_lcd_prHexByte(r);
	return(r);
}
    15d4:	8f 2d       	mov	r24, r15
    15d6:	60 96       	adiw	r28, 0x10	; 16
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	ff 90       	pop	r15
    15ec:	ef 90       	pop	r14
    15ee:	df 90       	pop	r13
    15f0:	cf 90       	pop	r12
    15f2:	bf 90       	pop	r11
    15f4:	af 90       	pop	r10
    15f6:	9f 90       	pop	r9
    15f8:	7f 90       	pop	r7
    15fa:	6f 90       	pop	r6
    15fc:	08 95       	ret

000015fe <sd_L2_open>:
struct sd_L2_part	sd_L2_part[SD_L2_MAXPD] = SD_L2_INIPD;

//
//	Open
//
struct sd_L2_part *sd_L2_open(char partno) {	// discriptor  0:error(detail is sd_errno)
    15fe:	cf 93       	push	r28
    1600:	c8 2f       	mov	r28, r24
#endif //SD_OPT_ARGCHECK

		// Allocate table
		pp = &sd_L2_part[0];
		for(pd = 0; pd < SD_L2_MAXPD; pd++) {
			if (pp->no < 0) {
    1602:	80 91 90 01 	lds	r24, 0x0190
    1606:	87 fd       	sbrc	r24, 7
    1608:	02 c0       	rjmp	.+4      	; 0x160e <sd_L2_open+0x10>
				break;
			}
			pp++;
		}
		if (pd >= SD_L2_MAXPD) {
			sd_errno = SD_EMFILE;
    160a:	88 e1       	ldi	r24, 0x18	; 24
    160c:	16 c0       	rjmp	.+44     	; 0x163a <sd_L2_open+0x3c>
			break;
		}
		
		// Device open
		if ((r = sd_L1_open()) != 0) {
    160e:	0e 94 25 09 	call	0x124a	; 0x124a <sd_L1_open>
    1612:	88 23       	and	r24, r24
    1614:	41 f0       	breq	.+16     	; 0x1626 <sd_L2_open+0x28>
			sd_errno = SD_EIO;
    1616:	95 e0       	ldi	r25, 0x05	; 5
    1618:	90 93 a3 01 	sts	0x01A3, r25
			if (r == 0xff) {			// Not insert
    161c:	8f 3f       	cpi	r24, 0xFF	; 255
    161e:	09 f0       	breq	.+2      	; 0x1622 <sd_L2_open+0x24>
    1620:	67 c0       	rjmp	.+206    	; 0x16f0 <sd_L2_open+0xf2>
				sd_errno = SD_EPERM;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	0a c0       	rjmp	.+20     	; 0x163a <sd_L2_open+0x3c>
			}
			break;
		}

		// Read boot sector
		if (SD_L1_READ(0) != 0) {		// Data->L1_buf[]
    1626:	60 e0       	ldi	r22, 0x00	; 0
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	cb 01       	movw	r24, r22
    162c:	46 ec       	ldi	r20, 0xC6	; 198
    162e:	51 e0       	ldi	r21, 0x01	; 1
    1630:	0e 94 6f 09 	call	0x12de	; 0x12de <sd_L1_read>
    1634:	88 23       	and	r24, r24
    1636:	21 f0       	breq	.+8      	; 0x1640 <sd_L2_open+0x42>
			sd_errno = SD_EIO;
    1638:	85 e0       	ldi	r24, 0x05	; 5
    163a:	80 93 a3 01 	sts	0x01A3, r24
    163e:	58 c0       	rjmp	.+176    	; 0x16f0 <sd_L2_open+0xf2>
#ifdef SD_OPT_BUF256
		m = (struct mbr *)(sd_buf2 - 256);
#else
		m = (struct mbr *)sd_buf;
#endif //SD_OPT_BUF256
		if ((m->bootsig[0] != 0x55) || (m->bootsig[1] != 0xAA)) {
    1640:	80 91 c4 03 	lds	r24, 0x03C4
    1644:	85 35       	cpi	r24, 0x55	; 85
    1646:	21 f4       	brne	.+8      	; 0x1650 <sd_L2_open+0x52>
    1648:	80 91 c5 03 	lds	r24, 0x03C5
    164c:	8a 3a       	cpi	r24, 0xAA	; 170
    164e:	11 f0       	breq	.+4      	; 0x1654 <sd_L2_open+0x56>
			sd_errno = SD_ENODEV;
    1650:	83 e1       	ldi	r24, 0x13	; 19
    1652:	f3 cf       	rjmp	.-26     	; 0x163a <sd_L2_open+0x3c>
			break;
		}

		// No partition
		if (m->bootcode[0] == 0xeb) {
    1654:	80 91 c6 01 	lds	r24, 0x01C6
    1658:	8b 3e       	cpi	r24, 0xEB	; 235
    165a:	81 f4       	brne	.+32     	; 0x167c <sd_L2_open+0x7e>
			pp->parttype  = SD_L2_NOPARTID;
    165c:	8f ef       	ldi	r24, 0xFF	; 255
    165e:	80 93 93 01 	sts	0x0193, r24
			pp->startsect = 0;
    1662:	10 92 94 01 	sts	0x0194, r1
    1666:	10 92 95 01 	sts	0x0195, r1
    166a:	10 92 96 01 	sts	0x0196, r1
    166e:	10 92 97 01 	sts	0x0197, r1
			pp->totalsect = 4194304L;	// 2GB
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	a0 e4       	ldi	r26, 0x40	; 64
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	20 c0       	rjmp	.+64     	; 0x16bc <sd_L2_open+0xbe>

		// Partition
		} else {
			// No entry?
			pt = &(m->parttbl[partno]);
    167c:	ec 2f       	mov	r30, r28
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	84 e0       	ldi	r24, 0x04	; 4
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	8a 95       	dec	r24
    1688:	e1 f7       	brne	.-8      	; 0x1682 <sd_L2_open+0x84>
    168a:	ec 57       	subi	r30, 0x7C	; 124
    168c:	fc 4f       	sbci	r31, 0xFC	; 252
			if (pt->type == 0) {
    168e:	84 81       	ldd	r24, Z+4	; 0x04
    1690:	88 23       	and	r24, r24
    1692:	11 f4       	brne	.+4      	; 0x1698 <sd_L2_open+0x9a>
				sd_errno = SD_ENOENT;
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	d1 cf       	rjmp	.-94     	; 0x163a <sd_L2_open+0x3c>
				break;
			}
			pp->parttype  = pt->type;
    1698:	80 93 93 01 	sts	0x0193, r24
			pp->startsect = sd_boconv4(pt->start_lba);
    169c:	40 85       	ldd	r20, Z+8	; 0x08
    169e:	51 85       	ldd	r21, Z+9	; 0x09
    16a0:	62 85       	ldd	r22, Z+10	; 0x0a
    16a2:	73 85       	ldd	r23, Z+11	; 0x0b
    16a4:	40 93 94 01 	sts	0x0194, r20
    16a8:	50 93 95 01 	sts	0x0195, r21
    16ac:	60 93 96 01 	sts	0x0196, r22
    16b0:	70 93 97 01 	sts	0x0197, r23
			pp->totalsect = sd_boconv4(pt->sect);
    16b4:	84 85       	ldd	r24, Z+12	; 0x0c
    16b6:	95 85       	ldd	r25, Z+13	; 0x0d
    16b8:	a6 85       	ldd	r26, Z+14	; 0x0e
    16ba:	b7 85       	ldd	r27, Z+15	; 0x0f
    16bc:	80 93 98 01 	sts	0x0198, r24
    16c0:	90 93 99 01 	sts	0x0199, r25
    16c4:	a0 93 9a 01 	sts	0x019A, r26
    16c8:	b0 93 9b 01 	sts	0x019B, r27
		}

		pp->bufsect   = -1;
    16cc:	8f ef       	ldi	r24, 0xFF	; 255
    16ce:	9f ef       	ldi	r25, 0xFF	; 255
    16d0:	dc 01       	movw	r26, r24
    16d2:	80 93 9c 01 	sts	0x019C, r24
    16d6:	90 93 9d 01 	sts	0x019D, r25
    16da:	a0 93 9e 01 	sts	0x019E, r26
    16de:	b0 93 9f 01 	sts	0x019F, r27
		pp->delayw    = 0;
    16e2:	10 92 91 01 	sts	0x0191, r1
		printf("L2 pp->parttype=0x%02x\n", pp->parttype);
		printf("L2 pp->startsect=%ld\n", pp->startsect);
		printf("L2 pp->totalsect=%ld\n", pp->totalsect);

		// Commit
		pp->no = pd;
    16e6:	10 92 90 01 	sts	0x0190, r1
    16ea:	80 e9       	ldi	r24, 0x90	; 144
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <sd_L2_open+0xf6>
		rc = 0;
		break;
	}
	
	if (rc != 0) {
		pp = 0;
    16f0:	80 e0       	ldi	r24, 0x00	; 0
    16f2:	90 e0       	ldi	r25, 0x00	; 0
	}

	printf("L2open(partno=%d)=0x%08lx\n", partno, (long)pp);
	i2c_lcd_position(0,0);	i2c_lcd_prCString("L2open="); i2c_lcd_prHexInt((int)pp);
	return(pp);
}
    16f4:	cf 91       	pop	r28
    16f6:	08 95       	ret

000016f8 <sd_L2_close>:

//
//	Close
//
signed char sd_L2_close(struct sd_L2_part *pp) {	// 0:normal -1:error
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	ec 01       	movw	r28, r24
			break;
		}
#endif //SD_OPT_ARGCHECK

		// Delayed write
		if (pp->delayw) {
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	88 23       	and	r24, r24
    1702:	c9 f0       	breq	.+50     	; 0x1736 <sd_L2_close+0x3e>
			if (SD_L1_WRITE(pp->bufsect + pp->startsect) != 0) {
    1704:	8c 85       	ldd	r24, Y+12	; 0x0c
    1706:	9d 85       	ldd	r25, Y+13	; 0x0d
    1708:	ae 85       	ldd	r26, Y+14	; 0x0e
    170a:	bf 85       	ldd	r27, Y+15	; 0x0f
    170c:	4c 81       	ldd	r20, Y+4	; 0x04
    170e:	5d 81       	ldd	r21, Y+5	; 0x05
    1710:	6e 81       	ldd	r22, Y+6	; 0x06
    1712:	7f 81       	ldd	r23, Y+7	; 0x07
    1714:	84 0f       	add	r24, r20
    1716:	95 1f       	adc	r25, r21
    1718:	a6 1f       	adc	r26, r22
    171a:	b7 1f       	adc	r27, r23
    171c:	bc 01       	movw	r22, r24
    171e:	cd 01       	movw	r24, r26
    1720:	46 ec       	ldi	r20, 0xC6	; 198
    1722:	51 e0       	ldi	r21, 0x01	; 1
    1724:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <sd_L1_write>
    1728:	88 23       	and	r24, r24
    172a:	29 f0       	breq	.+10     	; 0x1736 <sd_L2_close+0x3e>
				sd_errno = SD_EIO;
    172c:	85 e0       	ldi	r24, 0x05	; 5
    172e:	80 93 a3 01 	sts	0x01A3, r24
//	Close
//
signed char sd_L2_close(struct sd_L2_part *pp) {	// 0:normal -1:error
	signed char rc;
	
	rc = -1;
    1732:	8f ef       	ldi	r24, 0xFF	; 255
		// Delayed write
		if (pp->delayw) {
			if (SD_L1_WRITE(pp->bufsect + pp->startsect) != 0) {
				sd_errno = SD_EIO;
#ifndef SD_OPT_FORCECLOSE
				break;
    1734:	05 c0       	rjmp	.+10     	; 0x1740 <sd_L2_close+0x48>
#endif //SD_OPT_FORCECLOSE
			}
		}
		
		// Device close
		sd_L1_close();
    1736:	0e 94 6d 09 	call	0x12da	; 0x12da <sd_L1_close>
		pp->no = -1;
    173a:	8f ef       	ldi	r24, 0xFF	; 255
    173c:	88 83       	st	Y, r24
		rc = 0;
    173e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	printf("L2close(pp=0x%08lx)=%d\n", (long)pp, rc);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L2close=");i2c_lcd_prHexInt((int)pp);i2c_lcd_prHexByte(rc);
	return(rc);
}
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret

00001746 <sd_L2_read>:

//
//	Read
//
signed char sd_L2_read(struct sd_L2_part *pp, long sect) {	// 0:normal -1:error(detail is sd_errno)
    1746:	cf 92       	push	r12
    1748:	df 92       	push	r13
    174a:	ef 92       	push	r14
    174c:	ff 92       	push	r15
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	ec 01       	movw	r28, r24
    1754:	6a 01       	movw	r12, r20
    1756:	7b 01       	movw	r14, r22
			break;
		}
#endif //SD_OPT_PARTLIMCHK

		// Read Cache
		if (pp->bufsect == sect) {
    1758:	4c 85       	ldd	r20, Y+12	; 0x0c
    175a:	5d 85       	ldd	r21, Y+13	; 0x0d
    175c:	6e 85       	ldd	r22, Y+14	; 0x0e
    175e:	7f 85       	ldd	r23, Y+15	; 0x0f
    1760:	4c 15       	cp	r20, r12
    1762:	5d 05       	cpc	r21, r13
    1764:	6e 05       	cpc	r22, r14
    1766:	7f 05       	cpc	r23, r15
    1768:	69 f1       	breq	.+90     	; 0x17c4 <sd_L2_read+0x7e>
			rc = 0;
			break;
		}
		
		// Delayed write
		if (pp->delayw) {
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	88 23       	and	r24, r24
    176e:	89 f0       	breq	.+34     	; 0x1792 <sd_L2_read+0x4c>
			if (SD_L1_WRITE(pp->bufsect + pp->startsect) != 0) {
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	ae 81       	ldd	r26, Y+6	; 0x06
    1776:	bf 81       	ldd	r27, Y+7	; 0x07
    1778:	84 0f       	add	r24, r20
    177a:	95 1f       	adc	r25, r21
    177c:	a6 1f       	adc	r26, r22
    177e:	b7 1f       	adc	r27, r23
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	46 ec       	ldi	r20, 0xC6	; 198
    1786:	51 e0       	ldi	r21, 0x01	; 1
    1788:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <sd_L1_write>
    178c:	88 23       	and	r24, r24
    178e:	89 f4       	brne	.+34     	; 0x17b2 <sd_L2_read+0x6c>
				sd_errno = SD_EIO;
				break;
			}
			pp->delayw = 0;
    1790:	19 82       	std	Y+1, r1	; 0x01
		}

		// Read sector
		if (SD_L1_READ(sect + pp->startsect) != 0) {
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	ae 81       	ldd	r26, Y+6	; 0x06
    1798:	bf 81       	ldd	r27, Y+7	; 0x07
    179a:	8c 0d       	add	r24, r12
    179c:	9d 1d       	adc	r25, r13
    179e:	ae 1d       	adc	r26, r14
    17a0:	bf 1d       	adc	r27, r15
    17a2:	bc 01       	movw	r22, r24
    17a4:	cd 01       	movw	r24, r26
    17a6:	46 ec       	ldi	r20, 0xC6	; 198
    17a8:	51 e0       	ldi	r21, 0x01	; 1
    17aa:	0e 94 6f 09 	call	0x12de	; 0x12de <sd_L1_read>
    17ae:	88 23       	and	r24, r24
    17b0:	29 f0       	breq	.+10     	; 0x17bc <sd_L2_read+0x76>
			sd_errno = SD_EIO;
    17b2:	85 e0       	ldi	r24, 0x05	; 5
    17b4:	80 93 a3 01 	sts	0x01A3, r24
//	Read
//
signed char sd_L2_read(struct sd_L2_part *pp, long sect) {	// 0:normal -1:error(detail is sd_errno)
	signed char rc;
	
	rc = -1;
    17b8:	8f ef       	ldi	r24, 0xFF	; 255
		}

		// Read sector
		if (SD_L1_READ(sect + pp->startsect) != 0) {
			sd_errno = SD_EIO;
			break;
    17ba:	05 c0       	rjmp	.+10     	; 0x17c6 <sd_L2_read+0x80>
		}

		pp->bufsect = sect;
    17bc:	cc 86       	std	Y+12, r12	; 0x0c
    17be:	dd 86       	std	Y+13, r13	; 0x0d
    17c0:	ee 86       	std	Y+14, r14	; 0x0e
    17c2:	ff 86       	std	Y+15, r15	; 0x0f
		}
#endif //SD_OPT_PARTLIMCHK

		// Read Cache
		if (pp->bufsect == sect) {
			rc = 0;
    17c4:	80 e0       	ldi	r24, 0x00	; 0
	}

	printf("L2read(pp=0x%08lx,sect=%ld)=%d\n", (long)pp, sect, rc);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L2read=");i2c_lcd_prHexInt((int)pp);i2c_lcd_prHexInt(sect);i2c_lcd_prHexByte(rc);
	return(rc);
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	ff 90       	pop	r15
    17cc:	ef 90       	pop	r14
    17ce:	df 90       	pop	r13
    17d0:	cf 90       	pop	r12
    17d2:	08 95       	ret

000017d4 <sd_L2_write>:

//
//	Write 512bytes
//
#ifdef SD_OPT_WRITE
signed char sd_L2_write(struct sd_L2_part *pp, long sect) {	// 0:normal -1:error(detail is sd_errno)
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	ec 01       	movw	r28, r24
    17e2:	6a 01       	movw	r12, r20
    17e4:	7b 01       	movw	r14, r22
			break;
		}
#endif //SD_OPT_PARTLIMCHK
		
		// Write Cache
		if (pp->bufsect == sect) {
    17e6:	4c 85       	ldd	r20, Y+12	; 0x0c
    17e8:	5d 85       	ldd	r21, Y+13	; 0x0d
    17ea:	6e 85       	ldd	r22, Y+14	; 0x0e
    17ec:	7f 85       	ldd	r23, Y+15	; 0x0f
    17ee:	4c 15       	cp	r20, r12
    17f0:	5d 05       	cpc	r21, r13
    17f2:	6e 05       	cpc	r22, r14
    17f4:	7f 05       	cpc	r23, r15
    17f6:	e1 f0       	breq	.+56     	; 0x1830 <sd_L2_write+0x5c>
			rc = 0;
			break;
		}
		
		// Delayed write
		if (pp->delayw) {
    17f8:	89 81       	ldd	r24, Y+1	; 0x01
    17fa:	88 23       	and	r24, r24
    17fc:	a9 f0       	breq	.+42     	; 0x1828 <sd_L2_write+0x54>
			if (SD_L1_WRITE(pp->bufsect + pp->startsect) != 0) {
    17fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1800:	9d 81       	ldd	r25, Y+5	; 0x05
    1802:	ae 81       	ldd	r26, Y+6	; 0x06
    1804:	bf 81       	ldd	r27, Y+7	; 0x07
    1806:	84 0f       	add	r24, r20
    1808:	95 1f       	adc	r25, r21
    180a:	a6 1f       	adc	r26, r22
    180c:	b7 1f       	adc	r27, r23
    180e:	bc 01       	movw	r22, r24
    1810:	cd 01       	movw	r24, r26
    1812:	46 ec       	ldi	r20, 0xC6	; 198
    1814:	51 e0       	ldi	r21, 0x01	; 1
    1816:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <sd_L1_write>
    181a:	88 23       	and	r24, r24
    181c:	29 f0       	breq	.+10     	; 0x1828 <sd_L2_write+0x54>
				sd_errno = SD_EIO;
    181e:	85 e0       	ldi	r24, 0x05	; 5
    1820:	80 93 a3 01 	sts	0x01A3, r24
//
#ifdef SD_OPT_WRITE
signed char sd_L2_write(struct sd_L2_part *pp, long sect) {	// 0:normal -1:error(detail is sd_errno)
	signed char rc;
	
	rc = -1;
    1824:	8f ef       	ldi	r24, 0xFF	; 255
		
		// Delayed write
		if (pp->delayw) {
			if (SD_L1_WRITE(pp->bufsect + pp->startsect) != 0) {
				sd_errno = SD_EIO;
				break;
    1826:	07 c0       	rjmp	.+14     	; 0x1836 <sd_L2_write+0x62>
			}
			pp->delayw = 0;
		}

		// Marking
		pp->bufsect = sect;
    1828:	cc 86       	std	Y+12, r12	; 0x0c
    182a:	dd 86       	std	Y+13, r13	; 0x0d
    182c:	ee 86       	std	Y+14, r14	; 0x0e
    182e:	ff 86       	std	Y+15, r15	; 0x0f
		pp->delayw = 1;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	89 83       	std	Y+1, r24	; 0x01

		rc = 0;
    1834:	80 e0       	ldi	r24, 0x00	; 0
	}

	printf("L2write(pp=0x%08lx,sect=%ld)=%d\n", (long)pp, sect, rc);
	i2c_lcd_position(0,0);i2c_lcd_prCString("L2write=");i2c_lcd_prHexInt((int)pp);i2c_lcd_prHexInt(sect);i2c_lcd_prHexByte(rc);
	return(rc);
}
    1836:	df 91       	pop	r29
    1838:	cf 91       	pop	r28
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	cf 90       	pop	r12
    1842:	08 95       	ret

00001844 <delay_50uTimes>:
//

#include "delay.h"

void delay_50uTimes(unsigned char bTimes){
    for(; bTimes > 0; --bTimes) {
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <delay_50uTimes+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1846:	90 e1       	ldi	r25, 0x10	; 16
    1848:	9a 95       	dec	r25
    184a:	f1 f7       	brne	.-4      	; 0x1848 <delay_50uTimes+0x4>
    184c:	00 c0       	rjmp	.+0      	; 0x184e <delay_50uTimes+0xa>
    184e:	81 50       	subi	r24, 0x01	; 1
    1850:	88 23       	and	r24, r24
    1852:	c9 f7       	brne	.-14     	; 0x1846 <delay_50uTimes+0x2>
        delay_50u();
    }
    return;
}
    1854:	08 95       	ret

00001856 <delay_1mTimes>:

void delay_1mTimes(unsigned char bTimes){
    1856:	cf 93       	push	r28
    1858:	c8 2f       	mov	r28, r24
    for(; bTimes > 0; --bTimes) {
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <delay_1mTimes+0xe>
        delay_50uTimes(20);
    185c:	84 e1       	ldi	r24, 0x14	; 20
    185e:	0e 94 22 0c 	call	0x1844	; 0x1844 <delay_50uTimes>
    }
    return;
}

void delay_1mTimes(unsigned char bTimes){
    for(; bTimes > 0; --bTimes) {
    1862:	c1 50       	subi	r28, 0x01	; 1
    1864:	cc 23       	and	r28, r28
    1866:	d1 f7       	brne	.-12     	; 0x185c <delay_1mTimes+0x6>
        delay_50uTimes(20);
    }
    return;
}
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <main>:

#include "avr/io.h"
#include "sd.h"
#include "serial.h"

int main(void) {
    186c:	ef 92       	push	r14
    186e:	ff 92       	push	r15
    1870:	0f 93       	push	r16
    1872:	1f 93       	push	r17
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	69 97       	sbiw	r28, 0x19	; 25
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
	int i;
	int fd;
	char fname[] = "test.txt";
    1888:	de 01       	movw	r26, r28
    188a:	11 96       	adiw	r26, 0x01	; 1
    188c:	e0 e0       	ldi	r30, 0x00	; 0
    188e:	f1 e0       	ldi	r31, 0x01	; 1
    1890:	89 e0       	ldi	r24, 0x09	; 9
    1892:	01 90       	ld	r0, Z+
    1894:	0d 92       	st	X+, r0
    1896:	81 50       	subi	r24, 0x01	; 1
    1898:	e1 f7       	brne	.-8      	; 0x1892 <main+0x26>
	char buf[16] = "0123456789\r\n";
    189a:	de 01       	movw	r26, r28
    189c:	1a 96       	adiw	r26, 0x0a	; 10
    189e:	e9 e0       	ldi	r30, 0x09	; 9
    18a0:	f1 e0       	ldi	r31, 0x01	; 1
    18a2:	8d e0       	ldi	r24, 0x0D	; 13
    18a4:	01 90       	ld	r0, Z+
    18a6:	0d 92       	st	X+, r0
    18a8:	81 50       	subi	r24, 0x01	; 1
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <main+0x38>
    18ac:	fe 01       	movw	r30, r28
    18ae:	77 96       	adiw	r30, 0x17	; 23
    18b0:	83 e0       	ldi	r24, 0x03	; 3
    18b2:	df 01       	movw	r26, r30
    18b4:	1d 92       	st	X+, r1
    18b6:	8a 95       	dec	r24
    18b8:	e9 f7       	brne	.-6      	; 0x18b4 <main+0x48>
	
	USART_Init(9600);
    18ba:	80 e8       	ldi	r24, 0x80	; 128
    18bc:	95 e2       	ldi	r25, 0x25	; 37
    18be:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	
	PORTC =  _BV(PC0);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	88 b9       	out	0x08, r24	; 8
	DDRC  |=  _BV(DDC0) | _BV(DDC1) | _BV(DDC2) | _BV(DDC3) | _BV(DDC4);
    18c6:	87 b1       	in	r24, 0x07	; 7
    18c8:	8f 61       	ori	r24, 0x1F	; 31
    18ca:	87 b9       	out	0x07, r24	; 7
	
	PORTD |=  _BV(PD2);
    18cc:	5a 9a       	sbi	0x0b, 2	; 11
	DDRD  |=  _BV(DDD2);
    18ce:	52 9a       	sbi	0x0a, 2	; 10

	PORTB |=  _BV(PB2);					// SS high level
    18d0:	2a 9a       	sbi	0x05, 2	; 5
	DDRB  |=  _BV(DDB2);				// SS output
    18d2:	22 9a       	sbi	0x04, 2	; 4

	PORTD &= ~_BV(PD3);					// ON
    18d4:	5b 98       	cbi	0x0b, 3	; 11
	DDRD  |=  _BV(DDD3);				// LED port output
    18d6:	53 9a       	sbi	0x0a, 3	; 10

	// Mount
	if (sd_mount(0) < 0) {
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	0e 94 9c 06 	call	0xd38	; 0xd38 <sd_L3_mount>
    18de:	00 97       	sbiw	r24, 0x00	; 0
    18e0:	49 f4       	brne	.+18     	; 0x18f4 <main+0x88>
		for(;;) {
			PORTD |= _BV(PD3);				// OFF
    18e2:	5b 9a       	sbi	0x0b, 3	; 11
			delay_1mTimes(50);
    18e4:	82 e3       	ldi	r24, 0x32	; 50
    18e6:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
			PORTD &= ~_BV(PD3);				// ON
    18ea:	5b 98       	cbi	0x0b, 3	; 11
			delay_1mTimes(50);
    18ec:	82 e3       	ldi	r24, 0x32	; 50
    18ee:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
    18f2:	f7 cf       	rjmp	.-18     	; 0x18e2 <main+0x76>
		}
	}

	PORTC |= _BV(PC1);
    18f4:	41 9a       	sbi	0x08, 1	; 8
	SD_SET_DATE(2010,7,7);
    18f6:	87 ee       	ldi	r24, 0xE7	; 231
    18f8:	9c e3       	ldi	r25, 0x3C	; 60
    18fa:	90 93 7e 01 	sts	0x017E, r25
    18fe:	80 93 7d 01 	sts	0x017D, r24
	SD_SET_TIME(12,34,56);
    1902:	8c e5       	ldi	r24, 0x5C	; 92
    1904:	94 e6       	ldi	r25, 0x64	; 100
    1906:	90 93 a1 01 	sts	0x01A1, r25
    190a:	80 93 a0 01 	sts	0x01A0, r24

	// Open
	if ((fd = sd_open(fname, SD_O_CREAT|SD_O_TRUNC, 0)) < 0) {
    190e:	85 e5       	ldi	r24, 0x55	; 85
    1910:	91 e0       	ldi	r25, 0x01	; 1
    1912:	be 01       	movw	r22, r28
    1914:	6f 5f       	subi	r22, 0xFF	; 255
    1916:	7f 4f       	sbci	r23, 0xFF	; 255
    1918:	48 e1       	ldi	r20, 0x18	; 24
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <sd_L3_open>
    1920:	90 93 c5 01 	sts	0x01C5, r25
    1924:	80 93 c4 01 	sts	0x01C4, r24
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	39 f0       	breq	.+14     	; 0x193a <main+0xce>
    192c:	fc 01       	movw	r30, r24
    192e:	80 81       	ld	r24, Z
    1930:	99 27       	eor	r25, r25
    1932:	87 fd       	sbrc	r24, 7
    1934:	90 95       	com	r25
    1936:	97 ff       	sbrs	r25, 7
    1938:	09 c0       	rjmp	.+18     	; 0x194c <main+0xe0>
		for(;;) {
			PORTD |= _BV(PD3);				// OFF
    193a:	5b 9a       	sbi	0x0b, 3	; 11
			delay_1mTimes(50);
    193c:	82 e3       	ldi	r24, 0x32	; 50
    193e:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
			PORTD &= ~_BV(PD3);				// ON
    1942:	5b 98       	cbi	0x0b, 3	; 11
			delay_1mTimes(100);
    1944:	84 e6       	ldi	r24, 0x64	; 100
    1946:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
    194a:	f7 cf       	rjmp	.-18     	; 0x193a <main+0xce>
		}
	}

	PORTC |= _BV(PC2);
    194c:	42 9a       	sbi	0x08, 2	; 8
    194e:	01 e0       	ldi	r16, 0x01	; 1
    1950:	10 e0       	ldi	r17, 0x00	; 0
	// Write
	for(i = 0; i < 2000; i++) {
		if(i/2)PORTD |= _BV(PD2);
		else   PORTD &= ~_BV(PD2);
		buf[0]=USART_getc();
		if (sd_write(fd, buf, 1) <= 0) {
    1952:	24 e1       	ldi	r18, 0x14	; 20
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	82 9f       	mul	r24, r18
    1958:	70 01       	movw	r14, r0
    195a:	83 9f       	mul	r24, r19
    195c:	f0 0c       	add	r15, r0
    195e:	92 9f       	mul	r25, r18
    1960:	f0 0c       	add	r15, r0
    1962:	11 24       	eor	r1, r1
    1964:	89 e1       	ldi	r24, 0x19	; 25
    1966:	91 e0       	ldi	r25, 0x01	; 1
    1968:	e8 0e       	add	r14, r24
    196a:	f9 1e       	adc	r15, r25
	}

	PORTC |= _BV(PC2);
	// Write
	for(i = 0; i < 2000; i++) {
		if(i/2)PORTD |= _BV(PD2);
    196c:	03 30       	cpi	r16, 0x03	; 3
    196e:	11 05       	cpc	r17, r1
    1970:	10 f0       	brcs	.+4      	; 0x1976 <main+0x10a>
    1972:	5a 9a       	sbi	0x0b, 2	; 11
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <main+0x10c>
		else   PORTD &= ~_BV(PD2);
    1976:	5a 98       	cbi	0x0b, 2	; 11
		buf[0]=USART_getc();
    1978:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_getc>
    197c:	8a 87       	std	Y+10, r24	; 0x0a
		if (sd_write(fd, buf, 1) <= 0) {
    197e:	c7 01       	movw	r24, r14
    1980:	be 01       	movw	r22, r28
    1982:	66 5f       	subi	r22, 0xF6	; 246
    1984:	7f 4f       	sbci	r23, 0xFF	; 255
    1986:	41 e0       	ldi	r20, 0x01	; 1
    1988:	50 e0       	ldi	r21, 0x00	; 0
    198a:	0e 94 32 04 	call	0x864	; 0x864 <sd_L3_write>
    198e:	18 16       	cp	r1, r24
    1990:	19 06       	cpc	r1, r25
    1992:	4c f0       	brlt	.+18     	; 0x19a6 <main+0x13a>
			for(;;) {
				PORTD |= _BV(PD3);			// OFF
    1994:	5b 9a       	sbi	0x0b, 3	; 11
				delay_1mTimes(100);
    1996:	84 e6       	ldi	r24, 0x64	; 100
    1998:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
				PORTD &= ~_BV(PD3);			// ON
    199c:	5b 98       	cbi	0x0b, 3	; 11
				delay_1mTimes(50);
    199e:	82 e3       	ldi	r24, 0x32	; 50
    19a0:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
    19a4:	f7 cf       	rjmp	.-18     	; 0x1994 <main+0x128>
    19a6:	0f 5f       	subi	r16, 0xFF	; 255
    19a8:	1f 4f       	sbci	r17, 0xFF	; 255
		}
	}

	PORTC |= _BV(PC2);
	// Write
	for(i = 0; i < 2000; i++) {
    19aa:	97 e0       	ldi	r25, 0x07	; 7
    19ac:	01 3d       	cpi	r16, 0xD1	; 209
    19ae:	19 07       	cpc	r17, r25
    19b0:	e9 f6       	brne	.-70     	; 0x196c <main+0x100>
				delay_1mTimes(50);
			}
		}
	}

	PORTC |= _BV(PC3);
    19b2:	43 9a       	sbi	0x08, 3	; 8
	// Close
	if (sd_close(fd) < 0) {
    19b4:	c7 01       	movw	r24, r14
    19b6:	0e 94 39 06 	call	0xc72	; 0xc72 <sd_L3_close>
    19ba:	87 ff       	sbrs	r24, 7
    19bc:	09 c0       	rjmp	.+18     	; 0x19d0 <main+0x164>
		for(;;) {
			PORTD |= _BV(PD3);				// OFF
    19be:	5b 9a       	sbi	0x0b, 3	; 11
			delay_1mTimes(100);
    19c0:	84 e6       	ldi	r24, 0x64	; 100
    19c2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
			PORTD &= ~_BV(PD3);				// ON
    19c6:	5b 98       	cbi	0x0b, 3	; 11
			delay_1mTimes(100);
    19c8:	84 e6       	ldi	r24, 0x64	; 100
    19ca:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
    19ce:	f7 cf       	rjmp	.-18     	; 0x19be <main+0x152>
		}
	}

	PORTC |= _BV(PC4);
    19d0:	44 9a       	sbi	0x08, 4	; 8
	// unmount
	if (sd_unmount() < 0) {
    19d2:	85 e5       	ldi	r24, 0x55	; 85
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	0e 94 2a 08 	call	0x1054	; 0x1054 <sd_L3_unmount>
    19da:	87 ff       	sbrs	r24, 7
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <main+0x184>
		for(;;) {
			PORTD |= _BV(PD3);				// OFF
    19de:	5b 9a       	sbi	0x0b, 3	; 11
			delay_1mTimes(200);
    19e0:	88 ec       	ldi	r24, 0xC8	; 200
    19e2:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
			PORTD &= ~_BV(PD3);				// ON
    19e6:	5b 98       	cbi	0x0b, 3	; 11
			delay_1mTimes(200);
    19e8:	88 ec       	ldi	r24, 0xC8	; 200
    19ea:	0e 94 2b 0c 	call	0x1856	; 0x1856 <delay_1mTimes>
    19ee:	f7 cf       	rjmp	.-18     	; 0x19de <main+0x172>
		}
	}

	PORTC = _BV(PC0);
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PD3);				// OFF
    19f4:	5b 9a       	sbi	0x0b, 3	; 11
}
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	69 96       	adiw	r28, 0x19	; 25
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	f8 94       	cli
    1a00:	de bf       	out	0x3e, r29	; 62
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	cd bf       	out	0x3d, r28	; 61
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	08 95       	ret

00001a14 <toupper>:
    1a14:	91 11       	cpse	r25, r1
    1a16:	08 95       	ret
    1a18:	81 56       	subi	r24, 0x61	; 97
    1a1a:	8a 51       	subi	r24, 0x1A	; 26
    1a1c:	08 f4       	brcc	.+2      	; 0x1a20 <toupper+0xc>
    1a1e:	80 52       	subi	r24, 0x20	; 32
    1a20:	85 58       	subi	r24, 0x85	; 133
    1a22:	08 95       	ret

00001a24 <memcpy>:
    1a24:	fb 01       	movw	r30, r22
    1a26:	dc 01       	movw	r26, r24
    1a28:	02 c0       	rjmp	.+4      	; 0x1a2e <memcpy+0xa>
    1a2a:	01 90       	ld	r0, Z+
    1a2c:	0d 92       	st	X+, r0
    1a2e:	41 50       	subi	r20, 0x01	; 1
    1a30:	50 40       	sbci	r21, 0x00	; 0
    1a32:	d8 f7       	brcc	.-10     	; 0x1a2a <memcpy+0x6>
    1a34:	08 95       	ret

00001a36 <strncmp>:
    1a36:	fb 01       	movw	r30, r22
    1a38:	dc 01       	movw	r26, r24
    1a3a:	41 50       	subi	r20, 0x01	; 1
    1a3c:	50 40       	sbci	r21, 0x00	; 0
    1a3e:	30 f0       	brcs	.+12     	; 0x1a4c <strncmp+0x16>
    1a40:	8d 91       	ld	r24, X+
    1a42:	01 90       	ld	r0, Z+
    1a44:	80 19       	sub	r24, r0
    1a46:	19 f4       	brne	.+6      	; 0x1a4e <strncmp+0x18>
    1a48:	00 20       	and	r0, r0
    1a4a:	b9 f7       	brne	.-18     	; 0x1a3a <strncmp+0x4>
    1a4c:	88 1b       	sub	r24, r24
    1a4e:	99 0b       	sbc	r25, r25
    1a50:	08 95       	ret

00001a52 <_exit>:
    1a52:	f8 94       	cli

00001a54 <__stop_program>:
    1a54:	ff cf       	rjmp	.-2      	; 0x1a54 <__stop_program>
